{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p>ipyvizzu-story - Build, present and share animated data stories in Jupyter Notebook and similar environments</p> <p> Documentation     \u00b7 Examples     \u00b7 Code reference     \u00b7 Repository     \u00b7 Blog </p> </p> <p> </p>"},{"location":"#ipyvizzu-story","title":"ipyvizzu-story","text":""},{"location":"#about-the-extension","title":"About The Extension","text":"<p><code>ipyvizzu-story</code> is an extension of the animated charting tool ipyvizzu that enables users to create and present interactive data presentations within the data science notebook of their choice and to share them as an <code>HTML</code> file. The extension provides a widget that contains the presentation and adds controls for navigating between slides - predefined stages within the story being presented. Navigation also works with keyboard shortcuts - arrow keys, <code>PgUp</code>, <code>PgDn</code>, <code>Home</code>, <code>End</code> - and you can also use a clicker to switch between the slides.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install ipyvizzu-story</code></pre> <p>Visit Installation chapter for more options and details.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can check and download the code behind the animation on the top of the page in our Example gallery.</p> <p>You can create the story below with the following code snippet.</p> <p> </p> <pre><code>from ipyvizzu import Data, Config\nfrom ipyvizzustory import Story, Slide, Step\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\nstory = Story(data=data)\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\nstory.play()</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Visit our Documentation site for more details and a step-by-step tutorial into <code>ipyvizzu-story</code> or check out our Example gallery.</p>"},{"location":"#environments","title":"Environments","text":"<p><code>ipyvizzu-story</code> can be used in a wide variety of environments, visit Environments chapter for more details.</p> <ul> <li>Notebooks<ul> <li>Jupyter Notebook</li> <li>Colab</li> <li>Databricks</li> <li>DataCamp</li> <li>Deepnote</li> <li>JupyterLab</li> <li>JupyterLite</li> <li>Kaggle</li> <li>Noteable</li> </ul> </li> <li>App platforms<ul> <li>Streamlit</li> <li>Flask</li> <li>Panel</li> <li>Mercury</li> <li>Voil\u00e0</li> </ul> </li> <li>BI tools<ul> <li>Mode</li> </ul> </li> <li>IDEs<ul> <li>PyCharm</li> <li>VSCode Python</li> </ul> </li> <li>Python</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to the project, visit our Contributing guide for further info.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li> <p>Join our Slack if you have any questions or comments:     vizzu-community.slack.com</p> </li> <li> <p>Drop us a line at hello@vizzu.io</p> </li> <li> <p>Follow us on Twitter: VizzuHQ</p> </li> </ul>"},{"location":"#usage-statistics","title":"Usage Statistics","text":"<p><code>ipyvizzu-story</code> collects aggregate usage statistics by default to follow the progress and overall trends of our library. This feature is optional, and users can choose to opt-out. However, we do not track, collect, or store any personal data or personally identifiable information. Please note that even when this feature is enabled, publishing anything made with <code>ipyvizzu-story</code> remains GDPR compatible. For more details, please visit Analytics chapter.</p>"},{"location":"#license","title":"License","text":"<p>Copyright \u00a9 2022-2025 Vizzu Inc.</p> <p>Released under the Apache 2.0 License.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>See Code of Conduct of the <code>Vizzu</code> community.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>You can find our open issues in the project's issue tracker. Please let us know if you find any issues or have any feature requests there.</p>"},{"location":"CONTRIBUTING/#contributing_1","title":"Contributing","text":"<p>If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects.</p> <p>Our Roadmap page is a comprehensive list of tasks we want to do in the future. It is a good place to start if you want to contribute to <code>Vizzu</code>. In case you have something else in mind, that's awesome and we are very interested in hearing about it.</p>"},{"location":"CONTRIBUTING/#ci-cd","title":"CI-CD","text":""},{"location":"CONTRIBUTING/#development-environment","title":"Development environment","text":"<p>For contributing to the project, it is recommended to use <code>Python</code> <code>3.13</code>. However, for the documentation we are also using <code>JavaScript</code>. If you plan to contribute to this part of the project, you will need <code>Node.js</code>, preferably version <code>22</code>.</p> <p>The following steps demonstrate how to set up the development environment on an <code>Ubuntu</code> <code>24.04</code> operating system. However, the process can be adapted for other operating systems as well.</p> <p>To start using the <code>ipyvizzu-story</code> development environment, you need to create a virtual environment and install <code>pdm</code> within it.</p> <pre><code>python3.13 -m venv \".venv\"\nsource .venv/bin/activate\npip install pdm==2.22.3</code></pre> <p>Once set up, you can install development dependencies:</p> <pre><code>pdm install\npdm run deploy</code></pre> <p>For contributing to the documentation you need to install <code>npm</code> development dependencies:</p> <pre><code>npm install</code></pre> <p>The development requirements are installed based on the <code>pdm.lock</code> and <code>package-lock.json</code> files. To update the development requirements, you can use the command <code>pdm run lock</code>.</p> <p>Note: For all available <code>pdm</code> scripts, run <code>pdm run --list</code>.</p> <p>For better development practices, you can set up <code>pre-commit</code> and <code>pre-push</code> hooks in your local <code>Git</code> repository. The <code>pre-commit</code> hook will format the code automatically, and the <code>pre-push</code> hook will run the CI steps before pushing your changes.</p> <pre><code>pre-commit install --hook-type pre-commit --hook-type pre-push -c ./tools/ci/.pre-commit-ubuntu.yaml</code></pre> <p>Note: The provided <code>.pre-commit-ubuntu.yaml</code> configuration file is tailored for <code>Ubuntu</code> <code>24.04</code>. If you intend to use another operating system, you may need to create a custom configuration file suitable for that environment.</p>"},{"location":"CONTRIBUTING/#ci","title":"CI","text":"<p>The CI pipeline includes code formatting checks, code analysis, typing validation, and unit tests for the <code>ipyvizzu-story</code> project.</p> <p>To run the entire CI pipeline, execute the following <code>pdm</code> script:</p> <pre><code>pdm run ci</code></pre> <p>However, if you want to run the CI steps on specific parts of the project, you can use the following scripts: <code>ci-src</code>, <code>ci-docs</code>, or <code>ci-tools</code>.</p>"},{"location":"CONTRIBUTING/#formatting","title":"Formatting","text":"<p>You can check the code's formatting using the <code>format</code> script:</p> <pre><code>pdm run format</code></pre> <p>If you need to fix any formatting issues, you can use the <code>fix-format</code> script:</p> <pre><code>pdm run fix-format</code></pre> <p>If you wish to format specific parts of the project, you can use the following scripts: <code>format-src</code>, <code>format-docs</code>, <code>format-tools</code>, or <code>fix-format-src</code>, <code>fix-format-docs</code>, <code>fix-format-tools</code>.</p>"},{"location":"CONTRIBUTING/#code-analyses","title":"Code analyses","text":"<p>To perform code analyses, you can use the <code>lint</code> script:</p> <pre><code>pdm run lint</code></pre> <p>If you need to run code analyses for specific parts of the project, you can utilize the following scripts: <code>lint-src</code>, <code>lint-docs</code>, or <code>lint-tools</code>.</p>"},{"location":"CONTRIBUTING/#typing","title":"Typing","text":"<p>For type checking, you can use the <code>type</code> script:</p> <pre><code>pdm run type</code></pre> <p>If you want to check specific parts of the project, you can use the following scripts: <code>type-src</code> or <code>type-tools</code>.</p>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>The project is tested using the <code>unittest</code> testing framework and <code>tox</code>. To run the tests, you can use the <code>test</code> script:</p> <pre><code>pdm run test</code></pre>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>To build the documentation, you can use the <code>build-docs</code> script:</p> <pre><code>pdm run build-docs</code></pre> <p>You can read the online version at ipyvizzu-story.vizzuhq.com.</p>"},{"location":"CONTRIBUTING/#release","title":"Release","text":"<p><code>ipyvizzu-story</code> is distributed on pypi. Note: You need to be an administrator to release the project.</p> <p>To release <code>ipyvizzu-story</code>, follow the steps below:</p> <ul> <li> <p>Increase the version number in <code>__version__.py</code>. The version bump should be in     a separate commit.</p> </li> <li> <p>Generate the release notes and publish the new release on     Releases.</p> </li> </ul> <p>Note: Publishing a new release will automatically trigger the <code>cd</code> workflow, which builds, checks, and uploads the <code>ipyvizzu-story</code> package to pypi.</p> <p>Before making a release, you can build and check the package using the <code>release</code> script:</p> <pre><code>pdm run release</code></pre>"},{"location":"LICENSE/","title":"License","text":"<pre>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</pre>"},{"location":"installation/","title":"Installation","text":"<p><code>ipyvizzu-story</code> requires the ipyvizzu package.</p> <p>Info</p> <p><code>ipyvizzu-story</code> requires and downloads the Vizzu <code>JavaScript</code>/<code>C++</code> library and the Vizzu-Story <code>JavaScript</code> package from <code>jsDelivr CDN</code>, but you can also use a different or self-hosted version of them. Check Initialization chapter for more details.</p>"},{"location":"installation/#pypi","title":"pypi","text":"<p>Run the following command to install <code>ipyvizzu-story</code> from pypi</p> <pre><code>pip install ipyvizzu-story</code></pre> <p>and this is how to upgrade it.</p> <pre><code>pip install -U ipyvizzu-story</code></pre> <p>You can use <code>ipyvizzu-story</code> in <code>Jupyter/IPython</code>, <code>Streamlit</code>, <code>Panel</code> or <code>Python</code> (see Environments chapter for more details).</p>"},{"location":"installation/#jupyteripython","title":"Jupyter/IPython","text":"<p>You can install <code>ipyvizzu-story</code> in your notebook without using the command line by entering the following code into a cell.</p> <pre><code>!pip install ipyvizzu-story</code></pre> <p>If you want to install <code>Jupyter/IPython</code> as a dependency, install <code>ipyvizzu-story</code> with the following command.</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"installation/#streamlit","title":"Streamlit","text":"<p>If you want to install <code>Streamlit</code> as a dependency, install <code>ipyvizzu-story</code> with the following command.</p> <pre><code>pip install ipyvizzu-story[streamlit]</code></pre>"},{"location":"installation/#panel","title":"Panel","text":"<p>If you want to install <code>Panel</code> as a dependency, install <code>ipyvizzu-story</code> with the following command.</p> <pre><code>pip install ipyvizzu-story[panel]</code></pre>"},{"location":"installation/#conda-mamba","title":"conda / mamba","text":"<p>Installing <code>ipyvizzu-story</code> from <code>conda-forge</code> can be achieved by adding <code>conda-forge</code> to your channels with:</p> <pre><code>conda config --add channels conda-forge\nconda config --set channel_priority strict</code></pre> <p>Once the <code>conda-forge</code> channel has been enabled, run the following command to install <code>ipyvizzu-story</code> from conda</p> <pre><code>conda install ipyvizzu-story\n\n# or with mamba:\n\nmamba install ipyvizzu-story</code></pre> <p>and this is how to upgrade it.</p> <pre><code>conda update ipyvizzu-story\n\n# or with mamba:\n\nmamba update ipyvizzu-story</code></pre>"},{"location":"dev/","title":"Development","text":"<p>We have compiled some information on the development of <code>ipyvizzu-story</code> here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage.</p> <ul> <li>Contributing</li> <li>Code of Conduct</li> <li>Coverage report</li> </ul>"},{"location":"environments/","title":"Environments","text":"<p><code>ipyvizzu-story</code> can be used in a lot of different environments. We grouped these into several categories. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Notebooks</li> <li>App platforms</li> <li>BI tools</li> <li>IDEs</li> <li>Python</li> </ul>"},{"location":"environments/python/","title":"Python","text":""},{"location":"environments/python/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Python</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen *</p> </li> <li> <p> Use navigation buttons *</p> </li> <li> <p> Set width/height of the <code>Story</code> *</p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*can only be used in the exported html file.</p>"},{"location":"environments/python/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story</code></pre>"},{"location":"environments/python/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Python</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.py.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzustory_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>python3 ipyvizzustory_example.py</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/bi/","title":"BI tools","text":"<p><code>ipyvizzu-story</code> is available in the following BI tools. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Mode</li> </ul>"},{"location":"environments/bi/mode/","title":"Mode","text":""},{"location":"environments/bi/mode/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Mode</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen *</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file **</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*<code>Mode</code> disables the fullscreen button</p> <p>**<code>Mode</code> does not provide a download option for the created file</p>"},{"location":"environments/bi/mode/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter] -t \"/tmp\" &gt; /dev/null 2&gt;&amp;1</code></pre>"},{"location":"environments/bi/mode/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Mode</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/ide/","title":"IDEs","text":"<p><code>ipyvizzu-story</code> is available in the following IDEs. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>PyCharm</li> <li>VSCode Python</li> </ul>"},{"location":"environments/ide/pycharm/","title":"PyCharm","text":""},{"location":"environments/ide/pycharm/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>PyCharm Professional</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/ide/pycharm/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/ide/pycharm/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>PyCharm Professional</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/ide/vscode/","title":"VSCode Python","text":""},{"location":"environments/ide/vscode/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>VSCode Python</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/ide/vscode/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/ide/vscode/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>VSCode Python</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/","title":"Notebooks","text":"<p><code>ipyvizzu-story</code> is available in the following Notebooks. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Jupyter Notebook</li> <li>Colab</li> <li>Databricks</li> <li>DataCamp</li> <li>Deepnote</li> <li>JupyterLab</li> <li>JupyterLite</li> <li>Kaggle</li> <li>Noteable</li> </ul>"},{"location":"environments/notebook/colab/","title":"Colab","text":""},{"location":"environments/notebook/colab/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Colab</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen *</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*<code>Colab</code> disables the fullscreen button, use the built-in <code>view output fullscreen</code> option instead</p>"},{"location":"environments/notebook/colab/#live-example","title":"Live example","text":""},{"location":"environments/notebook/colab/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/colab/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Colab</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# note: in Colab,\n# it is recommended to set the width and height (CSS style),\n# because it will be too large with the default settings\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/databricks/","title":"Databricks","text":""},{"location":"environments/notebook/databricks/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Databricks</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code> *</p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*mandatory</p>"},{"location":"environments/notebook/databricks/#live-example","title":"Live example","text":"<p>Open in Databricks</p>"},{"location":"environments/notebook/databricks/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/databricks/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Databricks</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# note: in Databricks,\n# you need to set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\n# `databricks_unique_id` is your id which can be found after `?o=` in the url)\ndatabricks_unique_id = \"000000000000000\"\nhtml_file = \"mystory.html\"\n\nstory.export_to_html(filename=f\"/{html_file}\")\n\ndbutils.fs.cp(f\"file:/{html_file}\", f\"dbfs:/FileStore/{html_file}\")\ndisplayHTML(\n    f'&lt;a href=\"/files/{html_file}/?o={databricks_unique_id}\"'\n    + \" \"\n    + \"download&gt;Download HTML&lt;/a&gt;\"\n)\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/datacamp/","title":"DataCamp","text":""},{"location":"environments/notebook/datacamp/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>DataCamp</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method) *</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method) *</p> </li> <li> <p> Use fullscreen **</p> </li> <li> <p> Use navigation buttons *</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file *</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*<code>ipyvizzu-story</code> does not work in the default editor, switch to the <code>JupyterLab</code>-style editor</p> <p>**<code>DataCamp</code> disables the fullscreen button</p>"},{"location":"environments/notebook/datacamp/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/datacamp/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>DataCamp</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/deepnote/","title":"Deepnote","text":""},{"location":"environments/notebook/deepnote/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Deepnote</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen *</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code> **</p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*<code>Deepnote</code> disables the fullscreen button</p> <p>**mandatory</p>"},{"location":"environments/notebook/deepnote/#live-example","title":"Live example","text":""},{"location":"environments/notebook/deepnote/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/deepnote/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Deepnote</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# note: in Deepnote,\n# you need to set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyterlab/","title":"JupyterLab","text":""},{"location":"environments/notebook/jupyterlab/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>JupyterLab</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/notebook/jupyterlab/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/jupyterlab/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>JupyterLab</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyterlite/","title":"JupyterLite","text":""},{"location":"environments/notebook/jupyterlite/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>JupyterLite</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/notebook/jupyterlite/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>import micropip\n\nawait micropip.install(\"ipyvizzu-story[jupyter]\")</code></pre>"},{"location":"environments/notebook/jupyterlite/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>JupyterLite</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyternotebook/","title":"Jupyter Notebook","text":""},{"location":"environments/notebook/jupyternotebook/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Jupyter Notebook</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/notebook/jupyternotebook/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/jupyternotebook/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Jupyter Notebook</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/kaggle/","title":"Kaggle","text":""},{"location":"environments/notebook/kaggle/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Kaggle</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen *</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*<code>Kaggle</code> disables the fullscreen button</p>"},{"location":"environments/notebook/kaggle/#live-example","title":"Live example","text":""},{"location":"environments/notebook/kaggle/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/kaggle/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Kaggle</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/noteable/","title":"Noteable","text":""},{"location":"environments/notebook/noteable/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Noteable</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/notebook/noteable/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/noteable/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Noteable</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/","title":"App platforms","text":"<p><code>ipyvizzu-story</code> is available in the following App platforms. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Streamlit</li> <li>Flask</li> <li>Panel</li> <li>Mercury</li> <li>Voil\u00e0</li> </ul>"},{"location":"environments/platform/flask/","title":"Flask","text":""},{"location":"environments/platform/flask/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Flask</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method) *</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method) *</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*you can display the created <code>Story</code> in other ways, see the sample below</p>"},{"location":"environments/platform/flask/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story flask</code></pre>"},{"location":"environments/platform/flask/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Flask</code> with the following sample.</p> <pre><code># import flask, ipyvizzu and ipyvizzu-story\n\nfrom pathlib import Path\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.py.story import Story\n\nfrom flask import Flask, render_template\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nPath(\"static\").mkdir(parents=True, exist_ok=True)\nstory.export_to_html(filename=\"static/mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\n\n\n# you can display the Story from the saved string\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef vizzu():\n    return render_template(\"vizzu.html\", mystory=html)</code></pre> <p>Place the above code blocks into a python file (for example called <code>application.py</code>), create the html template (<code>templates/vizzu.html</code>) with the following content if you display the <code>Story</code> from the saved string</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;div class=\"container\"&gt;\n   &lt;iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mystory }}\" width=\"800px\"&gt;\n   &lt;/iframe&gt;\n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;</code></pre> <p>or with the following if you display the <code>Story</code> from the exported html file</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;div class=\"container\"&gt;\n   &lt;iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\" {{url_for('static', filename='/mystory.html')}}\" width=\"800px\"&gt;\n   &lt;/iframe&gt;\n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;</code></pre> <p>and run the following command in your command line in order to try it.</p> <pre><code>flask --app application run</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/mercury/","title":"Mercury","text":""},{"location":"environments/platform/mercury/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Mercury</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/platform/mercury/#live-example","title":"Live example","text":""},{"location":"environments/platform/mercury/#installation","title":"Installation","text":"<p>Add <code>ipyvizzu-story</code> to <code>requirements.txt</code>.</p> <pre><code>python-dotenv\npandas\nmercury\nipyvizzu-story</code></pre>"},{"location":"environments/platform/mercury/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Mercury</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\nfrom IPython.display import display as display_html, HTML\n\nimport mercury as mr\n\n\n# setup Mercury App\napp = mr.App(\n    title=\"ipyvizzu-story demo\",\n    description=\"ipyvizzu-story demo with mercury\",\n)\n\n# add widget\nselected = mr.MultiSelect(\n    label=\"Select what you want to see\",\n    value=[\"animation\"],\n    choices=[\"animation\", \"code\"],\n)\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\n\nif \"animation\" in selected.value:\n    story.play()\nif \"code\" in selected.value:\n    display_html(html)</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/panel/","title":"Panel","text":""},{"location":"environments/platform/panel/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Panel</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method) *</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul> <p>*for example, used in <code>pn.pane.HTML</code> method</p>"},{"location":"environments/platform/panel/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story[panel]</code></pre>"},{"location":"environments/platform/panel/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Panel</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory.env.pn.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# note: in Panel if you want to use the `play` method,\n# you need to set the width and height in pixels\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can customize Panel before `play`\n\n# import panel as pn\n#\n# pn.extension(sizing_mode=\"stretch_width\", template=\"fast\")\n#\n# pn.state.template.param.update(\n#     title=\"ipyvizzu-story\",\n# )\n#\n# story.play()\n\n\n# or if you would like to customize it completely,\n# you can do it with the `_repr_html_` method\n\n# import panel as pn\n#\n# pn.extension(sizing_mode=\"stretch_width\", template=\"fast\")\n#\n# pn.state.template.param.update(\n#     title=\"ipyvizzu-story\",\n# )\n#\n# pn.pane.HTML(\n#     story,\n#     height=500,\n#     sizing_mode=\"stretch_both\"\n# ).servable()</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzustory_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>panel serve ipyvizzustory_example.py --autoreload</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/streamlit/","title":"Streamlit","text":""},{"location":"environments/platform/streamlit/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Streamlit</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/platform/streamlit/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story[streamlit]</code></pre>"},{"location":"environments/platform/streamlit/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Streamlit</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.st.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}))\n)\nstory.add_slide(slide2)\n\n\n# note: in Streamlit if you want to use the `play` method,\n# you need to set the width and height in pixels or set the width to 100%\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzustory_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>streamlit run ipyvizzustory_example.py</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/voila/","title":"Voil\u00e0","text":""},{"location":"environments/platform/voila/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Voil\u00e0</code> are marked with a green check.</p> <ul> <li> <p> Display the created <code>Story</code> (<code>play</code> method)</p> </li> <li> <p> Display the created <code>Story</code> (<code>_repr_html_</code> method)</p> </li> <li> <p> Use fullscreen</p> </li> <li> <p> Use navigation buttons</p> </li> <li> <p> Set width/height of the <code>Story</code></p> </li> <li> <p> Export the <code>Story</code> into a html file</p> </li> <li> <p> Get the html <code>Story</code> as a string</p> </li> </ul>"},{"location":"environments/platform/voila/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter] voila</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/platform/voila/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Voil\u00e0</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n# )\n# data.add_df(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can export the Story into a html file\n\nstory.export_to_html(filename=\"mystory.html\")\n\n# or you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Place the above code blocks into notebook cells in a notebook file (for example called <code>ipyvizzustory_example.ipynb</code>) and run the following command in your command line in order to try it.</p> <pre><code>voila ipyvizzustory_example.ipynb</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/_basic/","title":"Basic example","text":"<p>The below story shows a basic use case for <code>ipyvizzu-story</code>.</p> <p></p> <pre><code>from ipyvizzu import Data, Config\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\n# Create the second slide\n# Configs provided here are changes to the visualization\n# created in the previous Step\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# Play the created story!\nstory.play()</code></pre>"},{"location":"examples/linkedinpoll/","title":"Presentation Poll Results","text":"<p>In August, 2022, we asked data scientists in 5 LinkedIn groups about how often they have to present the results of their analysis to business stakeholders. This is a data story about the results of that poll.</p> <p></p> <pre><code>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/examples/linkedinpoll/linkedinpoll.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_df(\n    df, units={\"Answer percentage\": \"%\", \"Vote percentage\": \"%\"}\n)\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"450px\")\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Style(\n            {\n                \"legend\": {\n                    \"label\": {\"fontSize\": \"1.1em\"},\n                    \"paddingRight\": \"-1em\",\n                },\n                \"plot\": {\n                    \"marker\": {\"label\": {\"fontSize\": \"1.1em\"}},\n                    \"paddingLeft\": \"10em\",\n                    \"xAxis\": {\n                        \"title\": {\"color\": \"#00000000\"},\n                        \"label\": {\"fontSize\": \"1.1em\"},\n                    },\n                    \"yAxis\": {\"label\": {\"fontSize\": \"1.1em\"}},\n                },\n                \"logo\": {\"width\": \"6em\"},\n                \"fontSize\": \"0.8em\",\n            }\n        ),\n        Config(\n            {\n                \"x\": {\"set\": [\"Vote percentage\", \"Answer\"]},\n                \"y\": \"Group number\",\n                \"color\": \"Answer\",\n                \"label\": \"Vote percentage\",\n                \"title\": \"How often do you present \"\n                + \"your findings to business stakeholders?\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),\n        Config(\n            {\n                \"split\": True,\n                \"title\": \"2 or more is the most popular answer in every group\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide(\n    Step(\n        Style(\n            {\n                \"plot\": {\n                    \"marker\": {\"label\": {\"fontSize\": \"0.916667em\"}}\n                }\n            }\n        ),\n        Config(\n            {\n                \"x\": {\"set\": [\"Vote count\", \"Answer\"]},\n                \"label\": \"Vote count\",\n                \"title\": \"61% of the votes came from one group\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide()\nslide4.add_step(\n    Step(\n        Style({\"plot\": {\"yAxis\": {\"title\": {\"color\": \"#00000000\"}}}}),\n        Config(\n            {\n                \"x\": \"Answer\",\n                \"y\": [\"Group number\", \"Vote count\"],\n                \"split\": False,\n                \"legend\": \"color\",\n            }\n        ),\n    )\n)\nslide4.add_step(\n    Step(\n        Style({\"plot\": {\"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}}}),\n        Config(\n            {\"y\": \"Vote count\", \"title\": \"More than 700 people voted\"}\n        ),\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide()\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"Answer percentage\", \"Answer\"],\n                \"y\": None,\n                \"label\": \"Answer percentage\",\n            }\n        )\n    )\n)\nslide5.add_step(\n    Step(\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),\n        Config(\n            {\n                \"coordSystem\": \"polar\",\n                \"title\": \"More than two-third of respondents present \"\n                + \"at least once per month\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\n\n# Play the created story!\nstory.play()</code></pre> <ul> <li> <p>Group 1: AI &amp; ML - Analytics ,     Data Science . SAP BI/ Analytics Cloud /Tableau /Power BI /Birst</p> </li> <li> <p>Group 2: Artificial Intelligence,     Digital Transformation Data Science, Automation, Machine Learning Analytics</p> </li> <li> <p>Group 3: Data Scientist, Data     Analyst and Data Engineer</p> </li> <li> <p>Group 4: Python Developers Community     (moderated)</p> </li> <li> <p>Group 5: Data Analytics, Data     Science, Business Analytics, Business Intelligence, Data Scientist &amp; Analyst</p> </li> </ul>"},{"location":"examples/population/","title":"UN Population Forecast","text":"<p>In this example, we explore the population of Africa between 1953-2098. On top of that, this story shows how to use the chart configuration presets. Check ipyvizzu - Chart presets chapter and ipyvizzu - Preset charts gallery for more details on the available chart presets.</p> <p></p> <pre><code>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/examples/population/population.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_df(df)\n\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Data.filter(\"record.Continent == 'Africa'\"),\n        Config.stackedArea(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"stackedBy\": \"Subregion\",\n                \"title\": \"Population of Africa 1953-2098\",\n            }\n        ),\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"angle\": 2.0}}}}),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config.percentageArea(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"stackedBy\": \"Subregion\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide(\n    Step(\n        Config.stream(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"stackedBy\": \"Subregion\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide(\n    Step(\n        Config.violin(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"splittedBy\": \"Subregion\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide4)\n\n\n# Play the created story!\nstory.play()</code></pre>"},{"location":"examples/proglangs/","title":"Popularity of Programming Languages","text":"<p>What programming languages do data scientists use?</p> <p>This was one of the questions in the State of Data Science Reports published by Anaconda between 2020 and 2022. This data story shows the answers to this question.</p> <p></p> <pre><code>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/examples/proglangs/proglangs.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_df(df, units={\"Value\": \"%\"})\n\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"600px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n# Set a handler that prevents showing specific elements\nlabel_handler_method = (\n    \"if(event.detail.text.split('%')[0] &lt; 5) event.preventDefault()\"\n)\nstory.add_event(\"plot-marker-label-draw\", label_handler_method)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Data.filter(\"record.Year == 2022\"),\n        Config(\n            {\n                \"x\": [\"Popularity\", \"Value\"],\n                \"y\": [\"Language\", \"Year\", \"Lang_year\"],\n                \"color\": \"Popularity\",\n                \"label\": \"Value\",\n                \"align\": \"stretch\",\n                \"title\": \"Use of programming languages by data scientists in 2022\",\n                \"lightness\": \"Year\",\n                \"legend\": \"color\",\n            }\n        ),\n        Style(\n            {\n                \"logo\": {\"width\": \"5em\"},\n                \"plot\": {\n                    \"xAxis\": {\"title\": {\"color\": \"#00000000\"}},\n                    \"paddingLeft\": \"2.5em\",\n                    \"marker\": {\n                        \"colorPalette\": \"#3DAE2BFF \"\n                        + \"#00833EFF \"\n                        + \"#00A19BFF \"\n                        + \"#0075A9FF \"\n                        + \"#003764FF\",\n                        \"minLightness\": 0,\n                        \"maxLightness\": 0.4,\n                    },\n                },\n                \"fontSize\": \"0.8em\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config(\n            {\n                \"split\": True,\n                \"align\": \"none\",\n                \"title\": \"Python is always or frequently used by 58%\",\n            }\n        ),\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide()\nslide3.add_step(\n    Step(\n        Config({\"split\": False, \"align\": \"stretch\"}),\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#999999FF\"}}}}),\n    )\n)\nslide3.add_step(\n    Step(\n        Data.filter(\n            \"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; record.Year == 2022\n            \"\"\"\n        ),\n        Config({\"x\": {\"range\": {\"max\": 100}}, \"align\": \"none\"}),\n    )\n)\nslide3.add_step(\n    Step(\n        Config(\n            {\n                \"sort\": \"byValue\",\n                \"title\": \"Python &amp; SQL are the most popular by a huge margin\",\n            }\n        )\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide()\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"sort\": \"none\",\n                \"title\": \"Let's focus on the six languages with data since 2020\",\n            }\n        )\n    )\n)\nslide4.add_step(\n    Step(\n        Data.filter(\n            \"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; (record.Language == 'R' || \n            record.Language == 'Python' || \n            record.Language == 'JavaScript' || \n            record.Language == 'Java' || \n            record.Language == 'C#' || \n            record.Language == 'C/C++') \n            &amp;&amp; record.Year == 2022\n            \"\"\"\n        ),\n    )\n)\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Lang_year\", \"Year\"],\n                \"x\": [\"Popularity\", \"Language\", \"Value\"],\n            }\n        )\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide()\nslide5.add_step(\n    Step(\n        Data.filter(\n            \"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; (record.Language == 'R' || \n            record.Language == 'Python' || \n            record.Language == 'JavaScript' || \n            record.Language == 'Java' || \n            record.Language == 'C#' || \n            record.Language == 'C/C++') \n            &amp;&amp; record.Year != 2020\n            \"\"\"\n        ),\n    )\n)\nslide5.add_step(\n    Step(\n        Data.filter(\n            \"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; (record.Language == 'R' || \n            record.Language == 'Python' || \n            record.Language == 'JavaScript' || \n            record.Language == 'Java' || \n            record.Language == 'C#' || \n            record.Language == 'C/C++')\n            \"\"\"\n        ),\n        Config(\n            {\n                \"title\": \"C/C++, C#, Java and Javascript are gaining popularity\"\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\n\n# Play the created story!\nstory.play()</code></pre>"},{"location":"examples/titanic/","title":"Passengers of the Titanic","text":"<pre><code>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/examples/titanic/titanic.csv\",\n    dtype={\"Pclass\": str},\n)\n\ndf.loc[df[\"Age\"].between(0, 20, \"both\"), \"Age_group\"] = \"20-\"\ndf.loc[df[\"Age\"].between(20, 30, \"right\"), \"Age_group\"] = \"20-30\"\ndf.loc[df[\"Age\"].between(30, 40, \"right\"), \"Age_group\"] = \"30-40\"\ndf.loc[df[\"Age\"].between(40, 50, \"right\"), \"Age_group\"] = \"40-50\"\ndf.loc[df[\"Age\"].between(50, 60, \"right\"), \"Age_group\"] = \"50-60\"\ndf.loc[df[\"Age\"].between(60, 100, \"right\"), \"Age_group\"] = \"60+\"\ndf[\"Age_group\"] = df[\"Age_group\"].fillna(\"NaN\")\n\n# Prepare to sort the dataframe by salary list\nagegroupsorter = [\n    \"20-\",\n    \"20-30\",\n    \"30-40\",\n    \"40-50\",\n    \"50-60\",\n    \"60+\",\n    \"NaN\",\n]\n\n# Create the dictionary that defines the order for sorting\nsorterIndex = dict(zip(agegroupsorter, range(len(agegroupsorter))))\n\n# Generate a rank column that will be used to sort\n# the dataframe numerically\ndf[\"Age_group_rank\"] = df[\"Age_group\"].map(sorterIndex)\ndf.sort_values([\"Age_group_rank\"], inplace=True)\n\ndata.add_df(df)\n\n\n# Set the style of the charts in the story\nstyle = Style(\n    {\n        \"plot\": {\n            \"yAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1em\",\n                    \"paddingRight\": \"1.2em\",\n                },\n                \"title\": {\"color\": \"#ffffff00\"},\n            },\n            \"xAxis\": {\n                \"label\": {\n                    \"angle\": \"2.5\",\n                    \"fontSize\": \"1.1em\",\n                    \"paddingRight\": \"0em\",\n                    \"paddingTop\": \"1em\",\n                },\n                \"title\": {\"fontSize\": \"1em\", \"paddingTop\": \"2.5em\"},\n            },\n        },\n        \"logo\": {\"width\": \"5em\"},\n    }\n)\n\n# Create story object, add data and style settings to it\nstory = Story(data=data, style=style)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Config.bar(\n            {\"x\": \"Count\", \"title\": \"Passengers of the Titanic\"}\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide()\nslide2.add_step(\n    Step(\n        Config.stackedBar({\"x\": \"Count\", \"stackedBy\": \"Sex\"}),\n    )\n)\nslide2.add_step(\n    Step(\n        Config.groupedBar(\n            {\n                \"x\": \"Count\",\n                \"y\": \"Sex\",\n                \"legend\": \"color\",\n                \"title\": \"Rougly one-third of the passengers were ladies\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide()\nslide3.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"Count\", \"Survived\"],\n                \"y\": \"Sex\",\n                \"color\": \"Sex\",\n                \"lightness\": \"Survived\",\n                \"label\": [\"Survived\", \"Count\"],\n            }\n        ),\n    )\n)\nslide3.add_step(\n    Step(\n        Config(\n            {\n                \"align\": \"stretch\",\n                \"title\": \"Much more women survived than men\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide()\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"x\": \"Count\",\n                \"align\": \"none\",\n                \"label\": None,\n                \"lightness\": None,\n                \"title\": \"Let's add the age of the passengers to the mix\",\n            }\n        ),\n    )\n)\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Count\", \"Sex\"],\n                \"x\": \"Age_group\",\n                \"label\": \"Count\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide()\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"label\": None,\n                \"title\": \"Let's see how many people survived/died \"\n                + \"in these age groups\",\n            }\n        ),\n    )\n)\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Count\", \"Sex\", \"Survived\"],\n                \"lightness\": \"Survived\",\n                \"legend\": \"lightness\",\n            }\n        ),\n    )\n)\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Count\", \"Survived\", \"Sex\"],\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\nslide6 = Slide(\n    Step(\n        Config(\n            {\n                \"align\": \"stretch\",\n                \"title\": \"Survival rate varies a bit between age groups\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide6)\n\nslide7 = Slide(\n    Step(\n        Data.filter(\"record.Sex == 'male'\"),\n        Config(\n            {\n                \"title\": \"But again shows a very different picture for men...\"\n            }\n        ),\n    )\n)\nstory.add_slide(slide7)\n\nslide8 = Slide()\nslide8.add_step(Step(Data.filter(None)))\nslide8.add_step(\n    Step(\n        Data.filter(\"record.Sex == 'female'\"),\n        Config({\"title\": \"...and women\"}),\n    )\n)\nstory.add_slide(slide8)\n\n\n# Play the created story!\nstory.play()</code></pre>"},{"location":"examples/trumptwitter/","title":"Trump Twitter Tirade","text":"<pre><code>import math\nimport pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/examples/trumptwitter/trumptwitter.csv\",\n)\ndata.add_df(df)\n\n\n# Set the style of the charts in the story\nstyle = Style(\n    {\n        \"tooltip\": {\"fontSize\": \"22px\"},\n        \"title\": {\"paddingTop\": \"1.2em\", \"fontSize\": \"2.5em\"},\n        \"legend\": {\"label\": {\"fontSize\": \"1.8em\"}, \"width\": \"16em\"},\n        \"logo\": {\"width\": \"6em\"},\n        \"plot\": {\n            \"marker\": {\"label\": {\"fontSize\": \"1.5em\"}},\n            \"yAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1.5em\",\n                },\n                \"title\": {\"color\": \"#ffffff00\"},\n                \"interlacing\": {\"color\": \"#ffffff00\"},\n            },\n            \"xAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1.6em\",\n                    \"paddingTop\": \"1em\",\n                },\n                \"title\": {\"fontSize\": \"1.4em\", \"paddingTop\": \"2.5em\"},\n            },\n        },\n    }\n)\n\n# Create story object, add data and style settings to it\nstory = Story(data=data, style=style)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Data.filter(\n            \"record.Firsttweet === 'Yes' &amp;&amp; record.Dummy === 'No'\"\n        ),\n        Config(\n            {\n                \"channels\": {\n                    \"y\": {\n                        \"set\": [\"tweets\"],\n                    },\n                    \"x\": {\"set\": [\"Period\", \"year\", \"month\"]},\n                    \"color\": \"Period\",\n                },\n                \"title\": \"Trump started tweeting in May '09\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Data.filter(\n            \"record.Period === 'New to Twitter' &amp;&amp; record.Dummy === 'No'\"\n        ),\n        Config(\n            {\n                \"title\": \"In the first two years he wasn't very active\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide(\n    Step(\n        Data.filter(\n            \"\"\"\n            (record.Period === 'New to Twitter' || record.Period === 'Businessman')\n            &amp;&amp; record.Dummy === 'No'\n            \"\"\"\n        ),\n        Config(\n            {\n                \"title\": \"Then he got hooked on\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide(\n    Step(\n        Data.filter(\n            \"\"\"\n            (record.Period === 'New to Twitter' || \n            record.Period === 'Businessman' || \n            record.Period === 'Nominee')\n            &amp;&amp; record.Dummy === 'No'\n            \"\"\"\n        ),\n        Config(\n            {\n                \"title\": \"Interesting trend after becoming a presidential nominee\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide(\n    Step(\n        Data.filter(\"record.Dummy === 'No'\"),\n        Config(\n            {\n                \"title\": \"And after he became President\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\nslide6 = Slide()\nslide6.add_step(\n    Step(\n        Config({\"geometry\": \"area\", \"align\": \"center\"}),\n    )\n)\nslide6.add_step(\n    Step(\n        Config(\n            {\n                \"title\": \"All of Trump's tweets until May 2020\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide6)\n\nslide7 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": \"retweetcount\",\n                \"title\": \"And the number of times these were retweeted\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide7)\n\nslide8 = Slide()\nslide8.add_step(\n    Step(\n        Config(\n            {\n                \"y\": \"tweets\",\n                \"title\": \"Let's focus on the number of tweets for now\",\n            }\n        ),\n    )\n),\nslide8.add_step(\n    Step(\n        Config(\n            {\n                \"x\": {\"set\": [\"year\", \"month\"]},\n                \"color\": None,\n            }\n        )\n    )\n)\nstory.add_slide(slide8)\n\nslide9 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": [\"tweets\", \"Type\"],\n                \"color\": \"Type\",\n                \"title\": \"Original tweets, retweets &amp; replies sent\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"marker\": {\n                        \"colorPalette\": \"#A0CDEBFF #60C0E6FF #1DA1F3FF\"\n                    }\n                }\n            },\n        ),\n    )\n)\nstory.add_slide(slide9)\n\nslide10 = Slide(\n    Step(\n        Config({\"split\": True, \"align\": \"none\"}),\n        Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}),\n    )\n)\nstory.add_slide(slide10)\n\nslide11 = Slide(\n    Step(\n        Config(\n            {\n                \"split\": False,\n                \"align\": \"stretch\",\n                \"title\": \"Original tweets, retweets &amp; replies sent (%)\",\n            }\n        ),\n        Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}}}),\n    )\n)\nstory.add_slide(slide11)\n\nslide12 = Slide()\nslide12.add_step(\n    Step(\n        Config(\n            {\n                \"align\": \"center\",\n                \"title\": \"\",\n            }\n        ),\n    )\n)\nslide12.add_step(\n    Step(\n        Config({\"y\": \"tweets\", \"color\": None, \"legend\": \"lightness\"}),\n        Style(\n            {\"plot\": {\"marker\": {\"colorPalette\": \"null\"}}},\n        ),\n    )\n)\nslide12.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"tweets\", \"Tool\"],\n                \"color\": \"Tool\",\n                \"title\": \"Tools Trump Used to Tweet\",\n                \"legend\": \"color\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"marker\": {\n                        \"colorPalette\": \"#597696FF #ED2828FF #26EC87FF #29B9BFFF \"\n                    }\n                }\n            },\n        ),\n    )\n)\nstory.add_slide(slide12)\n\nslide13 = Slide(\n    Step(\n        Config({\"split\": True, \"align\": \"none\"}),\n        Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}),\n    )\n)\nstory.add_slide(slide13)\n\nslide14 = Slide()\nslide14.add_step(\n    Step(\n        Config(\n            {\n                \"geometry\": \"rectangle\",\n            }\n        ),\n    )\n)\nslide14.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"tweets\", \"year\", \"month\"],\n                \"y\": \"Tool\",\n                \"geometry\": \"rectangle\",\n                \"split\": False,\n                \"align\": \"none\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"xAxis\": {\"title\": {\"color\": \"#ffffff00\"}},\n                    \"yAxis\": {\"label\": {\"color\": \"#999999ff\"}},\n                }\n            },\n        ),\n    )\n)\nslide14.add_step(\n    Step(\n        Config(\n            {\n                \"x\": \"tweets\",\n                \"label\": \"tweets\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide14)\n\nslide15 = Slide()\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"tweets\", \"AMPM\", \"hour12\"],\n                \"label\": None,\n            }\n        ),\n    )\n)\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"y\": {\n                    \"set\": [\"tweets\", \"Tool\"],\n                    \"range\": {\"min\": \"110%\", \"max\": \"0%\"},\n                },\n                \"x\": [\"AMPM\", \"hour12\"],\n            }\n        ),\n    )\n)\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"geometry\": \"area\",\n            }\n        ),\n    )\n)\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"coordSystem\": \"polar\",\n                \"angle\": math.pi,\n                \"title\": \"Time of Day When Trump Tweeted\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}},\n                    \"xAxis\": {\n                        \"label\": {\n                            \"fontSize\": \"2em\",\n                            \"paddingBottom\": \"2.5em\",\n                            \"paddingTop\": \"2.5em\",\n                            \"paddingLeft\": \"2.5em\",\n                            \"paddingRight\": \"2.5em\",\n                        }\n                    },\n                }\n            }\n        ),\n    )\n)\nstory.add_slide(slide15)\n\nslide16 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": [\"Businessman\", \"Tool\"],\n                \"title\": \"Times Trump Tweeted When Being a Businessman\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide16)\n\nslide17 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": [\"President\", \"Tool\"],\n                \"title\": \"Times Trump Tweeted When Being President\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide17)\n\n\n# Play the created story!\nstory.play()</code></pre>"},{"location":"examples/usbudget/","title":"US Federal R&amp;D budget","text":"<p>US Federal R&amp;D budget In this more involved example, we explore the history of the US Federal R&amp;D budget between 1955-2020. On top of the base functionality, this story showcases:</p> <ul> <li>Styling the overall Story</li> <li>Setting the size of the Story</li> <li>Slides with multiple steps</li> </ul> <p></p> <pre><code>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/examples/usbudget/usbudget.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_df(df, units={\"Amount\": \"B$\"})\n\n\n# Set the style of the charts in the story\nstyle = Style(\n    {\n        \"plot\": {\n            \"yAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1em\",\n                    \"paddingRight\": \"1.2em\",\n                },\n                \"title\": {\"color\": \"#ffffff00\"},\n            },\n            \"xAxis\": {\n                \"label\": {\n                    \"angle\": \"2.5\",\n                    \"fontSize\": \"1.1em\",\n                    \"paddingRight\": \"0em\",\n                    \"paddingTop\": \"1em\",\n                },\n                \"title\": {\"fontSize\": \"0.8em\", \"paddingTop\": \"2.5em\"},\n            },\n        },\n        \"logo\": {\"width\": \"5em\"},\n    }\n)\n\n# Create story object, add data and style settings to it\nstory = Story(data=data, style=style)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n\n# Add the first slide,\n# containing a single animation step that sets the initial chart\nslide1 = Slide(\n    Step(\n        # Only include rows where the Function value != Defense\n        # Note, filters currently only accept JavaScript style filters,\n        # hence the \"!==\", rather than \"!=\"\n        Data.filter(\"record.Function !== 'Defense'\"),\n        Config(\n            {\n                \"channels\": {\n                    \"y\": {\n                        \"set\": [\"Amount\", \"Function\"],\n                        # Set the range of the y-axis\n                        # to the min and max of the data being shown\n                        # default value is 110% of the maximum value\n                        \"range\": {\"min\": \"0%\", \"max\": \"100%\"},\n                    },\n                    \"x\": {\"set\": [\"Year\"]},\n                    \"color\": \"Function\",\n                },\n                \"title\": \"Stacked Area Chart - U.S. R&amp;D Budget in 1955-2020\",\n                \"geometry\": \"area\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\n# Show components side-by-side\nslide2 = Slide(\n    Step(\n        Config(\n            {\n                \"split\": True,\n                \"title\": \"Show Components Side by Side\",\n            }\n        )\n    )\n)\nstory.add_slide(slide2)\n\n# This slide contains multiple steps\n# Note that the slide is created as an empty object,\n# then steps are added to it one-by-one\nslide3 = Slide()\n# Step 1 - let's get back to the previous view\nslide3.add_step(Step(Config({\"split\": False})))\n# Step 2 - Add the defense function to the chart by removing it from the filter\nslide3.add_step(\n    Step(\n        Data.filter(None),\n        Config(\n            {\"title\": \"Add New Category While Keeping the Context\"}\n        ),\n    )\n)\n# Add the multi-step slide to the story, just like any other slide\nstory.add_slide(slide3)\n\n# Show share of components\nslide4 = Slide(\n    Step(\n        Config(\n            {\n                \"align\": \"stretch\",\n                \"title\": \"Show Share of Components (%)\",\n            }\n        )\n    )\n)\nstory.add_slide(slide4)\n\n# Compare data from 1955 and 2020\nslide5 = Slide()\n# Step 1 - switch back to value instead of percentage\nslide5.add_step(Step(Config({\"align\": \"none\"})))\n# Step 2 - switch to a stacked column chart by changing the geometry\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"geometry\": \"rectangle\",\n            }\n        )\n    )\n)\n# Step 3 - zoom to data from the first and last years\nslide5.add_step(\n    Step(\n        Data.filter(\n            \"record.Year === '1955' || record.Year === '2020' \"\n        ),\n        Config(\n            {\n                \"title\": \"Zoom to Specific Elements\",\n            }\n        ),\n    ),\n)\nstory.add_slide(slide5)\n\n# Group &amp; rearrange elements for comparison\nslide6 = Slide()\nslide6.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"Year\", \"Function\"],\n                \"y\": \"Amount\",\n                \"label\": \"Amount\",\n                \"title\": \"Group &amp; Rearrange for Better Comparison\",\n            }\n        )\n    )\n)\n\nslide6.add_step(Step(Config({\"x\": [\"Function\", \"Year\"]})))\nstory.add_slide(slide6)\n\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Set a handler that prevents showing the year values that are not divisible by 5\nhandler = \"\"\"\nlet Year = parseFloat(event.detail.text);\nif (!isNaN(Year) &amp;&amp; Year &gt; 1950 &amp;&amp; Year &lt; 2020 &amp;&amp; Year % 5 !== 0) {\n    event.preventDefault();\n}\n\"\"\"\n# Add handler to the plot-axis-label-draw event so that it takes effect\nstory.add_event(\"plot-axis-label-draw\", handler)\n\n\n# If you want to save the story as an interactive HTML\n# (containing only the output of the previous cell),\n# use the following command:\n# story.export_to_html(filename=\"mystory.html\")\n\n\n# Play the created story!\nstory.play()</code></pre>"},{"location":"reference/ipyvizzustory/","title":"Code reference","text":"<p>Build, present and share animated data stories in <code>Jupyter Notebook</code> and similar environments.</p> <p><code>ipyvizzu-story</code> package consists of two main parts:</p> <ul> <li>Storylib: environment independent modules</li> <li>Env: environment dependent modules</li> </ul> <p><code>ipyvizzu-story</code> package tries to figure out the environment and import the correct type of <code>Story</code>, however <code>Story</code> could be imported with full path.</p> <p><code>ipyvizzu-story</code> package imports the following objects in <code>__init__.py</code>:</p> <ul> <li><code>Story</code> from Env.py.story or     Env.ipy.story or     Env.st.story</li> <li>Step</li> <li>Slide</li> </ul>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.get_story","title":"<code>ipyvizzustory.get_story()</code>","text":"<p>A method for returning the appropriate Story for the environment.</p> <p>Returns:</p> Type Description <code>Union[Story, Story, Story]</code> <p>The appropriate <code>Story</code> for the environment.</p> Source code in <code>src/ipyvizzustory/__init__.py</code> <pre><code>def get_story():\n    \"\"\"\n    A method for returning the appropriate Story for the environment.\n\n    Returns:\n        (Union[ipyvizzustory.env.py.story.Story, ipyvizzustory.env.ipy.story.Story, ipyvizzustory.env.st.story.Story]):\n            The appropriate `Story` for the environment.\n    \"\"\"  # pylint: disable=line-too-long\n\n    return JupyterStory or StreamlitStory or PythonStory  # type: ignore</code></pre>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Story","title":"<code>ipyvizzustory.Story = get_story()</code>  <code>module-attribute</code>","text":"<p>Available types:</p> <ul> <li>Jupyter/IPython Story</li> <li>Streamlit Story</li> <li>Panel Story</li> <li>Python Story</li> </ul>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Slide","title":"<code>ipyvizzustory.Slide</code>","text":"<p>               Bases: <code>list</code></p> <p>A class for representing a slide of a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Slide(list):\n    \"\"\"A class for representing a slide of a presentation story.\"\"\"\n\n    def __init__(self, step: Optional[Step] = None):\n        \"\"\"\n        Slide constructor.\n\n        Args:\n            step: The first step can also be added to the slide in the constructor.\n\n        Example:\n            Initialize a slide without step:\n\n                slide = Slide()\n\n            Initialize a slide with a step:\n\n                slide = Slide(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n        \"\"\"\n\n        super().__init__()\n        if step:\n            self.add_step(step)\n\n    def add_step(self, step: Step) -&gt; None:\n        \"\"\"\n        A method for adding a step for the slide.\n\n        Args:\n            step: The next step of the slide.\n\n        Raises:\n            TypeError: If the type of the `step` is not\n                [Step][ipyvizzustory.storylib.story.Step].\n\n        Example:\n            Add steps to a slide:\n\n                slide = Slide()\n                slide.add_step(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n                slide.add_step(\n                    Step(\n                        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n                    )\n                )\n        \"\"\"\n\n        if not step or type(step) != Step:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Step.\")\n        self.append(step)</code></pre>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Slide.__init__","title":"<code>__init__(step=None)</code>","text":"<p>Slide constructor.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>Optional[Step]</code> <p>The first step can also be added to the slide in the constructor.</p> <code>None</code> Example <p>Initialize a slide without step:</p> <pre><code>slide = Slide()</code></pre> <p>Initialize a slide with a step:</p> <pre><code>slide = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(self, step: Optional[Step] = None):\n    \"\"\"\n    Slide constructor.\n\n    Args:\n        step: The first step can also be added to the slide in the constructor.\n\n    Example:\n        Initialize a slide without step:\n\n            slide = Slide()\n\n        Initialize a slide with a step:\n\n            slide = Slide(\n                Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n            )\n    \"\"\"\n\n    super().__init__()\n    if step:\n        self.add_step(step)</code></pre>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Slide.add_step","title":"<code>add_step(step)</code>","text":"<p>A method for adding a step for the slide.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>Step</code> <p>The next step of the slide.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>step</code> is not Step.</p> Example <p>Add steps to a slide:</p> <pre><code>slide = Slide()\nslide.add_step(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n    )\n)\nslide.add_step(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_step(self, step: Step) -&gt; None:\n    \"\"\"\n    A method for adding a step for the slide.\n\n    Args:\n        step: The next step of the slide.\n\n    Raises:\n        TypeError: If the type of the `step` is not\n            [Step][ipyvizzustory.storylib.story.Step].\n\n    Example:\n        Add steps to a slide:\n\n            slide = Slide()\n            slide.add_step(\n                Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n            )\n            slide.add_step(\n                Step(\n                    Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n                )\n            )\n    \"\"\"\n\n    if not step or type(step) != Step:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Step.\")\n    self.append(step)</code></pre>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Step","title":"<code>ipyvizzustory.Step</code>","text":"<p>               Bases: <code>dict</code></p> <p>A class for representing a step of a slide.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Step(dict):\n    \"\"\"A class for representing a step of a slide.\"\"\"\n\n    def __init__(\n        self,\n        *animations: Union[Data, Style, Config],\n        **anim_options: Optional[Union[str, int, float, dict]],\n    ):\n        \"\"\"\n        Step constructor.\n\n        Args:\n            *animations: List of [Data][ipyvizzu.Data],\n                [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects.\n                A `Step` can contain each of the above once.\n            **anim_options: Animation options such as duration.\n\n        Raises:\n            ValueError: If `animations` are not set.\n\n        Example:\n            Initialize a step with a [Config][ipyvizzu.Config] object:\n\n                step = Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n        \"\"\"\n\n        super().__init__()\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n        self._update(*animations)\n\n        if anim_options:\n            self[\"animOptions\"] = anim_options\n\n    def _update(self, *animations: Union[Data, Style, Config]) -&gt; None:\n        for animation in animations:\n            if not animation or type(animation) not in [\n                Data,\n                Style,\n                Config,\n            ]:  # pylint: disable=unidiomatic-typecheck\n                raise TypeError(\"Type must be Data, Style or Config.\")\n            if type(animation) == Data:  # pylint: disable=unidiomatic-typecheck\n                animation = DataFilter(animation)\n\n            builded_animation = animation.build()\n            common_keys = set(builded_animation).intersection(set(self))\n            if common_keys:\n                raise ValueError(f\"Animation is already merged: {common_keys}\")\n            self.update(builded_animation)</code></pre>"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Step.__init__","title":"<code>__init__(*animations, **anim_options)</code>","text":"<p>Step constructor.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>Union[Data, Style, Config]</code> <p>List of Data, Config and Style objects. A <code>Step</code> can contain each of the above once.</p> <code>()</code> <code>**anim_options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Animation options such as duration.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> are not set.</p> Example <p>Initialize a step with a Config object:</p> <pre><code>step = Step(\n    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(\n    self,\n    *animations: Union[Data, Style, Config],\n    **anim_options: Optional[Union[str, int, float, dict]],\n):\n    \"\"\"\n    Step constructor.\n\n    Args:\n        *animations: List of [Data][ipyvizzu.Data],\n            [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects.\n            A `Step` can contain each of the above once.\n        **anim_options: Animation options such as duration.\n\n    Raises:\n        ValueError: If `animations` are not set.\n\n    Example:\n        Initialize a step with a [Config][ipyvizzu.Config] object:\n\n            step = Step(\n                Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n            )\n    \"\"\"\n\n    super().__init__()\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n    self._update(*animations)\n\n    if anim_options:\n        self[\"animOptions\"] = anim_options</code></pre>"},{"location":"reference/ipyvizzustory/__version__/","title":"version","text":""},{"location":"reference/ipyvizzustory/__version__/#ipyvizzustory.__version__","title":"<code>ipyvizzustory.__version__</code>","text":"<p>A module for storing version number.</p>"},{"location":"reference/ipyvizzustory/env/","title":"Env","text":""},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env","title":"<code>ipyvizzustory.env</code>","text":"<p>Environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy","title":"<code>ipyvizzustory.env.ipy</code>","text":"<p><code>Jupyter</code>/<code>IPython</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story","title":"<code>story</code>","text":"<p>A module for working with presentation stories in <code>Jupyter</code>/<code>IPython</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Jupyter</code>/<code>IPython</code> environment.</p> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\"\n\n        display_html(HTML(self.to_html()))</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Jupyter</code>/<code>IPython</code> environment.</p> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\"\n\n    display_html(HTML(self.to_html()))</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn","title":"<code>ipyvizzustory.env.pn</code>","text":"<p><code>Panel</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story","title":"<code>story</code>","text":"<p>A module for working with presentation stories in <code>Panel</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Panel</code> environment.</p> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\"\n\n        _width, _height = self._size.get_width_height_in_pixels()\n\n        HTML(\n            self.to_html(),\n            width=_width,\n            height=_height,\n        ).servable()</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Panel</code> environment.</p> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\"\n\n    _width, _height = self._size.get_width_height_in_pixels()\n\n    HTML(\n        self.to_html(),\n        width=_width,\n        height=_height,\n    ).servable()</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py","title":"<code>ipyvizzustory.env.py</code>","text":"<p><code>Python</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story","title":"<code>story</code>","text":"<p>A module for working with presentation stories in <code>Python</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Python</code> environment.</p> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Python` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; str:\n        \"\"\"\n        A method for returning the assembled `HTML` code in `Python` environment.\n\n        Returns:\n            The assembled `HTML` code as string.\n        \"\"\"\n\n        return self.to_html()</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story.Story.play","title":"<code>play()</code>","text":"<p>A method for returning the assembled <code>HTML</code> code in <code>Python</code> environment.</p> <p>Returns:</p> Type Description <code>str</code> <p>The assembled <code>HTML</code> code as string.</p> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>def play(self) -&gt; str:\n    \"\"\"\n    A method for returning the assembled `HTML` code in `Python` environment.\n\n    Returns:\n        The assembled `HTML` code as string.\n    \"\"\"\n\n    return self.to_html()</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st","title":"<code>ipyvizzustory.env.st</code>","text":"<p><code>Streamlit</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story","title":"<code>story</code>","text":"<p>A module for working with presentation stories in <code>Streamlit</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Streamlit</code> environment.</p> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def _get_width_height(self) -&gt; Tuple[Optional[int], int]:\n        if self._size.width == \"100%\" and StorySize.is_pixel(self._size.height):\n            return None, int(float(self._size.height[:-2]))  # type: ignore\n        try:\n            return self._size.get_width_height_in_pixels()\n        except ValueError as error:\n            if str(error) == StorySize.ERROR_MSG_WIDTH_AND_HEIGHT:\n                raise ValueError(\n                    f\"{StorySize.ERROR_MSG_WIDTH_AND_HEIGHT} or width should be 100%\"\n                ) from error\n            raise error\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\"\n\n        _width, _height = self._get_width_height()\n\n        html(\n            self.to_html(),\n            width=_width,\n            height=_height,\n        )</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Streamlit</code> environment.</p> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\"\n\n    _width, _height = self._get_width_height()\n\n    html(\n        self.to_html(),\n        width=_width,\n        height=_height,\n    )</code></pre>"},{"location":"reference/ipyvizzustory/env/ipy/","title":"Ipy","text":""},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy","title":"<code>ipyvizzustory.env.ipy</code>","text":"<p><code>Jupyter</code>/<code>IPython</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story","title":"<code>ipyvizzustory.env.ipy.story</code>","text":"<p>A module for working with presentation stories in <code>Jupyter</code>/<code>IPython</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Jupyter</code>/<code>IPython</code> environment.</p> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\"\n\n        display_html(HTML(self.to_html()))</code></pre>"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Jupyter</code>/<code>IPython</code> environment.</p> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\"\n\n    display_html(HTML(self.to_html()))</code></pre>"},{"location":"reference/ipyvizzustory/env/ipy/story/","title":"Story","text":""},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story","title":"<code>ipyvizzustory.env.ipy.story</code>","text":"<p>A module for working with presentation stories in <code>Jupyter</code>/<code>IPython</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story.Story","title":"<code>ipyvizzustory.env.ipy.story.Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Jupyter</code>/<code>IPython</code> environment.</p> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\"\n\n        display_html(HTML(self.to_html()))</code></pre>"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Jupyter</code>/<code>IPython</code> environment.</p> Source code in <code>src/ipyvizzustory/env/ipy/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\"\n\n    display_html(HTML(self.to_html()))</code></pre>"},{"location":"reference/ipyvizzustory/env/pn/","title":"Pn","text":""},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn","title":"<code>ipyvizzustory.env.pn</code>","text":"<p><code>Panel</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story","title":"<code>ipyvizzustory.env.pn.story</code>","text":"<p>A module for working with presentation stories in <code>Panel</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Panel</code> environment.</p> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\"\n\n        _width, _height = self._size.get_width_height_in_pixels()\n\n        HTML(\n            self.to_html(),\n            width=_width,\n            height=_height,\n        ).servable()</code></pre>"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Panel</code> environment.</p> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\"\n\n    _width, _height = self._size.get_width_height_in_pixels()\n\n    HTML(\n        self.to_html(),\n        width=_width,\n        height=_height,\n    ).servable()</code></pre>"},{"location":"reference/ipyvizzustory/env/pn/story/","title":"Story","text":""},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story","title":"<code>ipyvizzustory.env.pn.story</code>","text":"<p>A module for working with presentation stories in <code>Panel</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story.Story","title":"<code>ipyvizzustory.env.pn.story.Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Panel</code> environment.</p> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\"\n\n        _width, _height = self._size.get_width_height_in_pixels()\n\n        HTML(\n            self.to_html(),\n            width=_width,\n            height=_height,\n        ).servable()</code></pre>"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Panel</code> environment.</p> Source code in <code>src/ipyvizzustory/env/pn/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\"\n\n    _width, _height = self._size.get_width_height_in_pixels()\n\n    HTML(\n        self.to_html(),\n        width=_width,\n        height=_height,\n    ).servable()</code></pre>"},{"location":"reference/ipyvizzustory/env/py/","title":"Py","text":""},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py","title":"<code>ipyvizzustory.env.py</code>","text":"<p><code>Python</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story","title":"<code>ipyvizzustory.env.py.story</code>","text":"<p>A module for working with presentation stories in <code>Python</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Python</code> environment.</p> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Python` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; str:\n        \"\"\"\n        A method for returning the assembled `HTML` code in `Python` environment.\n\n        Returns:\n            The assembled `HTML` code as string.\n        \"\"\"\n\n        return self.to_html()</code></pre>"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story.Story.play","title":"<code>play()</code>","text":"<p>A method for returning the assembled <code>HTML</code> code in <code>Python</code> environment.</p> <p>Returns:</p> Type Description <code>str</code> <p>The assembled <code>HTML</code> code as string.</p> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>def play(self) -&gt; str:\n    \"\"\"\n    A method for returning the assembled `HTML` code in `Python` environment.\n\n    Returns:\n        The assembled `HTML` code as string.\n    \"\"\"\n\n    return self.to_html()</code></pre>"},{"location":"reference/ipyvizzustory/env/py/story/","title":"Story","text":""},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story","title":"<code>ipyvizzustory.env.py.story</code>","text":"<p>A module for working with presentation stories in <code>Python</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story.Story","title":"<code>ipyvizzustory.env.py.story.Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Python</code> environment.</p> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Python` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def play(self) -&gt; str:\n        \"\"\"\n        A method for returning the assembled `HTML` code in `Python` environment.\n\n        Returns:\n            The assembled `HTML` code as string.\n        \"\"\"\n\n        return self.to_html()</code></pre>"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story.Story.play","title":"<code>play()</code>","text":"<p>A method for returning the assembled <code>HTML</code> code in <code>Python</code> environment.</p> <p>Returns:</p> Type Description <code>str</code> <p>The assembled <code>HTML</code> code as string.</p> Source code in <code>src/ipyvizzustory/env/py/story.py</code> <pre><code>def play(self) -&gt; str:\n    \"\"\"\n    A method for returning the assembled `HTML` code in `Python` environment.\n\n    Returns:\n        The assembled `HTML` code as string.\n    \"\"\"\n\n    return self.to_html()</code></pre>"},{"location":"reference/ipyvizzustory/env/st/","title":"St","text":""},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st","title":"<code>ipyvizzustory.env.st</code>","text":"<p><code>Streamlit</code> environment dependent modules.</p>"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story","title":"<code>ipyvizzustory.env.st.story</code>","text":"<p>A module for working with presentation stories in <code>Streamlit</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Streamlit</code> environment.</p> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def _get_width_height(self) -&gt; Tuple[Optional[int], int]:\n        if self._size.width == \"100%\" and StorySize.is_pixel(self._size.height):\n            return None, int(float(self._size.height[:-2]))  # type: ignore\n        try:\n            return self._size.get_width_height_in_pixels()\n        except ValueError as error:\n            if str(error) == StorySize.ERROR_MSG_WIDTH_AND_HEIGHT:\n                raise ValueError(\n                    f\"{StorySize.ERROR_MSG_WIDTH_AND_HEIGHT} or width should be 100%\"\n                ) from error\n            raise error\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\"\n\n        _width, _height = self._get_width_height()\n\n        html(\n            self.to_html(),\n            width=_width,\n            height=_height,\n        )</code></pre>"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Streamlit</code> environment.</p> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\"\n\n    _width, _height = self._get_width_height()\n\n    html(\n        self.to_html(),\n        width=_width,\n        height=_height,\n    )</code></pre>"},{"location":"reference/ipyvizzustory/env/st/story/","title":"Story","text":""},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story","title":"<code>ipyvizzustory.env.st.story</code>","text":"<p>A module for working with presentation stories in <code>Streamlit</code> environment.</p>"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story.Story","title":"<code>ipyvizzustory.env.st.story.Story</code>","text":"<p>               Bases: <code>Story</code></p> <p>A class for representing a presentation story in <code>Streamlit</code> environment.</p> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>class Story(StoryLib):\n    \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\"\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n        \"\"\"\n\n        super().__init__(data=data, style=style)\n\n    def _get_width_height(self) -&gt; Tuple[Optional[int], int]:\n        if self._size.width == \"100%\" and StorySize.is_pixel(self._size.height):\n            return None, int(float(self._size.height[:-2]))  # type: ignore\n        try:\n            return self._size.get_width_height_in_pixels()\n        except ValueError as error:\n            if str(error) == StorySize.ERROR_MSG_WIDTH_AND_HEIGHT:\n                raise ValueError(\n                    f\"{StorySize.ERROR_MSG_WIDTH_AND_HEIGHT} or width should be 100%\"\n                ) from error\n            raise error\n\n    def play(self) -&gt; None:\n        \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\"\n\n        _width, _height = self._get_width_height()\n\n        html(\n            self.to_html(),\n            width=_width,\n            height=_height,\n        )</code></pre>"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n    \"\"\"\n\n    super().__init__(data=data, style=style)</code></pre>"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story.Story.play","title":"<code>play()</code>","text":"<p>A method for displaying the assembled <code>HTML</code> code in <code>Streamlit</code> environment.</p> Source code in <code>src/ipyvizzustory/env/st/story.py</code> <pre><code>def play(self) -&gt; None:\n    \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\"\n\n    _width, _height = self._get_width_height()\n\n    html(\n        self.to_html(),\n        width=_width,\n        height=_height,\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/","title":"Storylib","text":""},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib","title":"<code>ipyvizzustory.storylib</code>","text":"<p>Environment independent modules.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.animation","title":"<code>ipyvizzustory.storylib.animation</code>","text":"<p>A module for working with chart animations.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.animation.DataFilter","title":"<code>DataFilter</code>","text":"<p>               Bases: <code>Data</code></p> <p>A class for representing a data filter.</p> Source code in <code>src/ipyvizzustory/storylib/animation.py</code> <pre><code>class DataFilter(Data):\n    \"\"\"A class for representing a data filter.\"\"\"\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method.\n        Data initialized with a `DataFilter` must contain only a filter.\n\n        Returns:\n            A dictionary contains the filter key with the filter expression.\n\n        Raises:\n            ValueError: If `DataFilter` does not contain a filter or contains anything else.\n        \"\"\"\n\n        if len(self.keys()) != 1 or \"filter\" not in self:\n            raise KeyError(\"Data must contain filter and only that.\")\n        return {\"filter\": self[\"filter\"]}</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.animation.DataFilter.build","title":"<code>build()</code>","text":"<p>A method for overwriting Data.build method. Data initialized with a <code>DataFilter</code> must contain only a filter.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary contains the filter key with the filter expression.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>DataFilter</code> does not contain a filter or contains anything else.</p> Source code in <code>src/ipyvizzustory/storylib/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method.\n    Data initialized with a `DataFilter` must contain only a filter.\n\n    Returns:\n        A dictionary contains the filter key with the filter expression.\n\n    Raises:\n        ValueError: If `DataFilter` does not contain a filter or contains anything else.\n    \"\"\"\n\n    if len(self.keys()) != 1 or \"filter\" not in self:\n        raise KeyError(\"Data must contain filter and only that.\")\n    return {\"filter\": self[\"filter\"]}</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story","title":"<code>ipyvizzustory.storylib.story</code>","text":"<p>A module for working with presentation stories.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Step","title":"<code>Step</code>","text":"<p>               Bases: <code>dict</code></p> <p>A class for representing a step of a slide.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Step(dict):\n    \"\"\"A class for representing a step of a slide.\"\"\"\n\n    def __init__(\n        self,\n        *animations: Union[Data, Style, Config],\n        **anim_options: Optional[Union[str, int, float, dict]],\n    ):\n        \"\"\"\n        Step constructor.\n\n        Args:\n            *animations: List of [Data][ipyvizzu.Data],\n                [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects.\n                A `Step` can contain each of the above once.\n            **anim_options: Animation options such as duration.\n\n        Raises:\n            ValueError: If `animations` are not set.\n\n        Example:\n            Initialize a step with a [Config][ipyvizzu.Config] object:\n\n                step = Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n        \"\"\"\n\n        super().__init__()\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n        self._update(*animations)\n\n        if anim_options:\n            self[\"animOptions\"] = anim_options\n\n    def _update(self, *animations: Union[Data, Style, Config]) -&gt; None:\n        for animation in animations:\n            if not animation or type(animation) not in [\n                Data,\n                Style,\n                Config,\n            ]:  # pylint: disable=unidiomatic-typecheck\n                raise TypeError(\"Type must be Data, Style or Config.\")\n            if type(animation) == Data:  # pylint: disable=unidiomatic-typecheck\n                animation = DataFilter(animation)\n\n            builded_animation = animation.build()\n            common_keys = set(builded_animation).intersection(set(self))\n            if common_keys:\n                raise ValueError(f\"Animation is already merged: {common_keys}\")\n            self.update(builded_animation)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Step.__init__","title":"<code>__init__(*animations, **anim_options)</code>","text":"<p>Step constructor.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>Union[Data, Style, Config]</code> <p>List of Data, Config and Style objects. A <code>Step</code> can contain each of the above once.</p> <code>()</code> <code>**anim_options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Animation options such as duration.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> are not set.</p> Example <p>Initialize a step with a Config object:</p> <pre><code>step = Step(\n    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(\n    self,\n    *animations: Union[Data, Style, Config],\n    **anim_options: Optional[Union[str, int, float, dict]],\n):\n    \"\"\"\n    Step constructor.\n\n    Args:\n        *animations: List of [Data][ipyvizzu.Data],\n            [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects.\n            A `Step` can contain each of the above once.\n        **anim_options: Animation options such as duration.\n\n    Raises:\n        ValueError: If `animations` are not set.\n\n    Example:\n        Initialize a step with a [Config][ipyvizzu.Config] object:\n\n            step = Step(\n                Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n            )\n    \"\"\"\n\n    super().__init__()\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n    self._update(*animations)\n\n    if anim_options:\n        self[\"animOptions\"] = anim_options</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Slide","title":"<code>Slide</code>","text":"<p>               Bases: <code>list</code></p> <p>A class for representing a slide of a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Slide(list):\n    \"\"\"A class for representing a slide of a presentation story.\"\"\"\n\n    def __init__(self, step: Optional[Step] = None):\n        \"\"\"\n        Slide constructor.\n\n        Args:\n            step: The first step can also be added to the slide in the constructor.\n\n        Example:\n            Initialize a slide without step:\n\n                slide = Slide()\n\n            Initialize a slide with a step:\n\n                slide = Slide(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n        \"\"\"\n\n        super().__init__()\n        if step:\n            self.add_step(step)\n\n    def add_step(self, step: Step) -&gt; None:\n        \"\"\"\n        A method for adding a step for the slide.\n\n        Args:\n            step: The next step of the slide.\n\n        Raises:\n            TypeError: If the type of the `step` is not\n                [Step][ipyvizzustory.storylib.story.Step].\n\n        Example:\n            Add steps to a slide:\n\n                slide = Slide()\n                slide.add_step(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n                slide.add_step(\n                    Step(\n                        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n                    )\n                )\n        \"\"\"\n\n        if not step or type(step) != Step:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Step.\")\n        self.append(step)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Slide.__init__","title":"<code>__init__(step=None)</code>","text":"<p>Slide constructor.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>Optional[Step]</code> <p>The first step can also be added to the slide in the constructor.</p> <code>None</code> Example <p>Initialize a slide without step:</p> <pre><code>slide = Slide()</code></pre> <p>Initialize a slide with a step:</p> <pre><code>slide = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(self, step: Optional[Step] = None):\n    \"\"\"\n    Slide constructor.\n\n    Args:\n        step: The first step can also be added to the slide in the constructor.\n\n    Example:\n        Initialize a slide without step:\n\n            slide = Slide()\n\n        Initialize a slide with a step:\n\n            slide = Slide(\n                Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n            )\n    \"\"\"\n\n    super().__init__()\n    if step:\n        self.add_step(step)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Slide.add_step","title":"<code>add_step(step)</code>","text":"<p>A method for adding a step for the slide.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>Step</code> <p>The next step of the slide.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>step</code> is not Step.</p> Example <p>Add steps to a slide:</p> <pre><code>slide = Slide()\nslide.add_step(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n    )\n)\nslide.add_step(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_step(self, step: Step) -&gt; None:\n    \"\"\"\n    A method for adding a step for the slide.\n\n    Args:\n        step: The next step of the slide.\n\n    Raises:\n        TypeError: If the type of the `step` is not\n            [Step][ipyvizzustory.storylib.story.Step].\n\n    Example:\n        Add steps to a slide:\n\n            slide = Slide()\n            slide.add_step(\n                Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n            )\n            slide.add_step(\n                Step(\n                    Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n                )\n            )\n    \"\"\"\n\n    if not step or type(step) != Step:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Step.\")\n    self.append(step)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize","title":"<code>StorySize</code>","text":"<p>A class for representing the size of a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class StorySize:\n    \"\"\"A class for representing the size of a presentation story.\"\"\"\n\n    ERROR_MSG_WIDTH_AND_HEIGHT = \"width and height should be in pixels\"\n    ERROR_MSG_WIDTH_OR_HEIGHT = \"width or height should be in pixels\"\n    ERROR_MSG_ASPECT_RATIO = \"aspect_ratio should be a float\"\n\n    def __init__(\n        self,\n        width: Optional[Union[int, float, str]] = None,\n        height: Optional[Union[int, float, str]] = None,\n        aspect_ratio: Optional[Union[int, float, str]] = None,\n    ):\n        \"\"\"\n        StorySize constructor.\n\n        Args:\n            width: The width of a presentation story.\n            height: The height of a presentation story.\n            aspect_ratio: The aspect ratio of a presentation story.\n\n        Raises:\n            ValueError: If width, height and aspect_ratio are set together.\n        \"\"\"\n\n        width = self._convert_to_pixel_or_return(width)\n        height = self._convert_to_pixel_or_return(height)\n\n        self._width = width\n        self._height = height\n        self._aspect_ratio = aspect_ratio\n\n        self._style = \"\"\n        if None not in [width, height, aspect_ratio]:\n            raise ValueError(\n                \"width, height and aspect ratio cannot be set at the same time\"\n            )\n        if all([height is not None, aspect_ratio is not None]):\n            width = \"unset\"\n        if any([width is not None, height is not None, aspect_ratio is not None]):\n            _width = \"\" if width is None else f\"width: {width};\"\n            _height = \"\" if height is None else f\"height: {height};\"\n            _aspect_ratio = (\n                \"\"\n                if aspect_ratio is None\n                else f\"aspect-ratio: {aspect_ratio} !important;\"\n            )\n            self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\"\n\n    @staticmethod\n    def _convert_to_pixel_or_return(value: Any) -&gt; Optional[str]:\n        if StorySize._is_int(value) or StorySize._is_float(value):\n            return str(value) + \"px\"\n        return value\n\n    @staticmethod\n    def _is_int(value: Any) -&gt; bool:\n        if isinstance(value, int):\n            return True\n        if isinstance(value, str):\n            if re.search(r\"^[-+]?[0-9]+$\", value):\n                return True\n        return False\n\n    @staticmethod\n    def _is_float(value: Any) -&gt; bool:\n        if isinstance(value, float):\n            return True\n        if isinstance(value, str):\n            if re.search(r\"^[+-]?[0-9]+\\.[0-9]+$\", value):\n                return True\n        return False\n\n    @property\n    def width(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for storing the width of a presentation story.\n\n        Returns:\n            The width of a presentation story.\n        \"\"\"\n\n        return self._width\n\n    @property\n    def height(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for storing the height of a presentation story.\n\n        Returns:\n            The height of a presentation story.\n        \"\"\"\n\n        return self._height\n\n    @property\n    def aspect_ratio(self) -&gt; Optional[Union[int, float, str]]:\n        \"\"\"\n        A property for storing the aspect ratio of a presentation story.\n\n        Returns:\n            The aspect ratio of a presentation story.\n        \"\"\"\n\n        return self._aspect_ratio\n\n    @property\n    def style(self) -&gt; str:\n        \"\"\"\n        A property for storing the style of a presentation story.\n\n        Note:\n            If neither `width`, `height` nor `aspect_ratio` is set, it returns an empty string.\n\n        Returns:\n            The cssText width and height of a presentation story.\n        \"\"\"\n\n        return self._style\n\n    @staticmethod\n    def is_pixel(value: Any) -&gt; bool:\n        \"\"\"\n        A static method for checking the type of the given value.\n\n        Args:\n            value: The value to check.\n\n        Returns:\n            `True` if the value is pixel, `False` otherwise.\n        \"\"\"\n\n        if StorySize._is_int(value) or StorySize._is_float(value):\n            return True\n        if isinstance(value, str) and value.endswith(\"px\"):\n            if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]):\n                return True\n        return False\n\n    def get_width_height_in_pixels(self) -&gt; Tuple[int, int]:\n        \"\"\"\n        A method for returning the width and height in pixels.\n\n        Raises:\n            ValueError: If width and height are not in pixels when aspect_ratio is not set.\n            ValueError: If width or height is not in pixel when aspect_ratio is set.\n            ValueError: If aspect_ratio is not a float when aspect_ratio is set.\n\n        Returns:\n            The width and height in pixels as int.\n        \"\"\"\n\n        if self.aspect_ratio is None:\n            if any(\n                [\n                    not StorySize.is_pixel(self.width),\n                    not StorySize.is_pixel(self.height),\n                ]\n            ):\n                raise ValueError(StorySize.ERROR_MSG_WIDTH_AND_HEIGHT)\n            _width = int(float(self.width[:-2]))  # type: ignore\n            _height = int(float(self.height[:-2]))  # type: ignore\n        else:\n            if not any(\n                [\n                    StorySize._is_int(self.aspect_ratio),\n                    StorySize._is_float(self.aspect_ratio),\n                ]\n            ):\n                raise ValueError(StorySize.ERROR_MSG_ASPECT_RATIO)\n            if not any(\n                [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)]\n            ):\n                raise ValueError(StorySize.ERROR_MSG_WIDTH_OR_HEIGHT)\n            _aspect_ratio = float(self.aspect_ratio)\n            if StorySize.is_pixel(self.width):\n                _width = float(self.width[:-2])  # type: ignore\n                _height = int(_width / _aspect_ratio)\n                _width = int(_width)\n            else:\n                _height = float(self.height[:-2])  # type: ignore\n                _width = int(_height * _aspect_ratio)\n                _height = int(_height)\n        return (_width, _height)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.width","title":"<code>width</code>  <code>property</code>","text":"<p>A property for storing the width of a presentation story.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The width of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.height","title":"<code>height</code>  <code>property</code>","text":"<p>A property for storing the height of a presentation story.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The height of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.aspect_ratio","title":"<code>aspect_ratio</code>  <code>property</code>","text":"<p>A property for storing the aspect ratio of a presentation story.</p> <p>Returns:</p> Type Description <code>Optional[Union[int, float, str]]</code> <p>The aspect ratio of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.style","title":"<code>style</code>  <code>property</code>","text":"<p>A property for storing the style of a presentation story.</p> Note <p>If neither <code>width</code>, <code>height</code> nor <code>aspect_ratio</code> is set, it returns an empty string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The cssText width and height of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.__init__","title":"<code>__init__(width=None, height=None, aspect_ratio=None)</code>","text":"<p>StorySize constructor.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>Optional[Union[int, float, str]]</code> <p>The width of a presentation story.</p> <code>None</code> <code>height</code> <code>Optional[Union[int, float, str]]</code> <p>The height of a presentation story.</p> <code>None</code> <code>aspect_ratio</code> <code>Optional[Union[int, float, str]]</code> <p>The aspect ratio of a presentation story.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If width, height and aspect_ratio are set together.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(\n    self,\n    width: Optional[Union[int, float, str]] = None,\n    height: Optional[Union[int, float, str]] = None,\n    aspect_ratio: Optional[Union[int, float, str]] = None,\n):\n    \"\"\"\n    StorySize constructor.\n\n    Args:\n        width: The width of a presentation story.\n        height: The height of a presentation story.\n        aspect_ratio: The aspect ratio of a presentation story.\n\n    Raises:\n        ValueError: If width, height and aspect_ratio are set together.\n    \"\"\"\n\n    width = self._convert_to_pixel_or_return(width)\n    height = self._convert_to_pixel_or_return(height)\n\n    self._width = width\n    self._height = height\n    self._aspect_ratio = aspect_ratio\n\n    self._style = \"\"\n    if None not in [width, height, aspect_ratio]:\n        raise ValueError(\n            \"width, height and aspect ratio cannot be set at the same time\"\n        )\n    if all([height is not None, aspect_ratio is not None]):\n        width = \"unset\"\n    if any([width is not None, height is not None, aspect_ratio is not None]):\n        _width = \"\" if width is None else f\"width: {width};\"\n        _height = \"\" if height is None else f\"height: {height};\"\n        _aspect_ratio = (\n            \"\"\n            if aspect_ratio is None\n            else f\"aspect-ratio: {aspect_ratio} !important;\"\n        )\n        self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\"</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.is_pixel","title":"<code>is_pixel(value)</code>  <code>staticmethod</code>","text":"<p>A static method for checking the type of the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the value is pixel, <code>False</code> otherwise.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>@staticmethod\ndef is_pixel(value: Any) -&gt; bool:\n    \"\"\"\n    A static method for checking the type of the given value.\n\n    Args:\n        value: The value to check.\n\n    Returns:\n        `True` if the value is pixel, `False` otherwise.\n    \"\"\"\n\n    if StorySize._is_int(value) or StorySize._is_float(value):\n        return True\n    if isinstance(value, str) and value.endswith(\"px\"):\n        if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]):\n            return True\n    return False</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.get_width_height_in_pixels","title":"<code>get_width_height_in_pixels()</code>","text":"<p>A method for returning the width and height in pixels.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If width and height are not in pixels when aspect_ratio is not set.</p> <code>ValueError</code> <p>If width or height is not in pixel when aspect_ratio is set.</p> <code>ValueError</code> <p>If aspect_ratio is not a float when aspect_ratio is set.</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>The width and height in pixels as int.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def get_width_height_in_pixels(self) -&gt; Tuple[int, int]:\n    \"\"\"\n    A method for returning the width and height in pixels.\n\n    Raises:\n        ValueError: If width and height are not in pixels when aspect_ratio is not set.\n        ValueError: If width or height is not in pixel when aspect_ratio is set.\n        ValueError: If aspect_ratio is not a float when aspect_ratio is set.\n\n    Returns:\n        The width and height in pixels as int.\n    \"\"\"\n\n    if self.aspect_ratio is None:\n        if any(\n            [\n                not StorySize.is_pixel(self.width),\n                not StorySize.is_pixel(self.height),\n            ]\n        ):\n            raise ValueError(StorySize.ERROR_MSG_WIDTH_AND_HEIGHT)\n        _width = int(float(self.width[:-2]))  # type: ignore\n        _height = int(float(self.height[:-2]))  # type: ignore\n    else:\n        if not any(\n            [\n                StorySize._is_int(self.aspect_ratio),\n                StorySize._is_float(self.aspect_ratio),\n            ]\n        ):\n            raise ValueError(StorySize.ERROR_MSG_ASPECT_RATIO)\n        if not any(\n            [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)]\n        ):\n            raise ValueError(StorySize.ERROR_MSG_WIDTH_OR_HEIGHT)\n        _aspect_ratio = float(self.aspect_ratio)\n        if StorySize.is_pixel(self.width):\n            _width = float(self.width[:-2])  # type: ignore\n            _height = int(_width / _aspect_ratio)\n            _width = int(_width)\n        else:\n            _height = float(self.height[:-2])  # type: ignore\n            _width = int(_height * _aspect_ratio)\n            _height = int(_height)\n    return (_width, _height)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story","title":"<code>Story</code>","text":"<p>               Bases: <code>dict</code></p> <p>A class for representing a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Story(dict):\n    \"\"\"A class for representing a presentation story.\"\"\"\n\n    # pylint: disable=too-many-instance-attributes\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n\n        Raises:\n            TypeError: If the type of the `data` is not `ipyvizzu.Data`.\n            TypeError: If the type of the `style` is not `ipyvizzu.Style`.\n\n        Example:\n            Initialize a story with data and without style:\n\n                data = Data()\n                data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\n                data.add_series(\"Bar\", [15, 32, 12])\n                data.add_series(\"Baz\", [5, 3, 2])\n\n                story = Story(data=data)\n        \"\"\"\n\n        super().__init__()\n\n        self._analytics = True\n        self._vizzu: Optional[str] = None\n        self._vizzu_story: str = VIZZU_STORY\n        self._start_slide: Optional[int] = None\n\n        self._size: StorySize = StorySize()\n\n        self._features: List[str] = []\n        self._events: List[str] = []\n        self._plugins: List[str] = []\n\n        if not data or type(data) != Data:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Data.\")\n        self.update(data.build())\n\n        if style:\n            if type(style) != Style:  # pylint: disable=unidiomatic-typecheck\n                raise TypeError(\"Type must be Style.\")\n            self.update(style.build())\n\n        self[\"slides\"] = []\n\n    @property\n    def analytics(self) -&gt; bool:\n        \"\"\"\n        A property for enabling/disabling the usage statistics feature.\n\n        The usage statistics feature allows aggregate usage data collection\n        using Plausible's algorithm.\n        Enabling this feature helps us follow the progress and overall trends of our library,\n        allowing us to focus our resources effectively and better serve our users.\n\n        We do not track, collect, or store any personal data or personally identifiable information.\n        All data is isolated to a single day, a single site, and a single device only.\n\n        Please note that even when this feature is enabled,\n        publishing anything made with `ipyvizzu-story` remains GDPR compatible.\n\n        Returns:\n            The value of the property (default `True`).\n        \"\"\"\n\n        return self._analytics\n\n    @analytics.setter\n    def analytics(self, analytics: Optional[bool]):\n        self._analytics = bool(analytics)\n\n    @property\n    def vizzu(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for changing `vizzu` url.\n\n        Note:\n            If `None`, vizzu url is set by `vizzu-story`.\n\n        Returns:\n            `Vizzu` url.\n        \"\"\"\n\n        return self._vizzu\n\n    @vizzu.setter\n    def vizzu(self, url: str) -&gt; None:\n        self._vizzu = url\n\n    @property\n    def vizzu_story(self) -&gt; str:\n        \"\"\"\n        A property for changing `vizzu-story` url.\n\n        Returns:\n            `Vizzu-story` url.\n        \"\"\"\n\n        return self._vizzu_story\n\n    @vizzu_story.setter\n    def vizzu_story(self, url: str) -&gt; None:\n        self._vizzu_story = url\n\n    @property\n    def start_slide(self) -&gt; Optional[int]:\n        \"\"\"\n        A property for setting the starter slide.\n\n        Returns:\n            Number of the starter slide.\n        \"\"\"\n\n        return self._start_slide\n\n    @start_slide.setter\n    def start_slide(self, number: int) -&gt; None:\n        self._start_slide = number\n\n    def add_slide(self, slide: Slide) -&gt; None:\n        \"\"\"\n        A method for adding a slide for the story.\n\n        Args:\n            slide: The next slide of the story.\n\n        Raises:\n            TypeError: If the type of the `slide` is not\n                [Slide][ipyvizzustory.storylib.story.Slide].\n\n        Example:\n            Add a slide to the story:\n\n                story.add_slide(\n                    Slide(\n                        Step(\n                            Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                        )\n                    )\n                )\n        \"\"\"\n\n        if not slide or type(slide) != Slide:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Slide.\")\n        self[\"slides\"].append(slide)\n\n    def set_feature(self, name: str, enabled: bool) -&gt; None:\n        \"\"\"\n        A method for enabling or disabling a feature of the story.\n\n        Args:\n            name: The name of the feature.\n            enabled: `True` if enabled or `False` if disabled.\n\n        Example:\n            Set a feature of the story, for example enable the tooltip:\n\n                story.set_feature(\"tooltip\", True)\n        \"\"\"\n\n        self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\")\n\n    def add_event(self, event: str, handler: str) -&gt; None:\n        \"\"\"\n        A method for creating and turning on an event handler.\n\n        Args:\n            event: The type of the event.\n            handler: The handler `JavaScript` expression as string.\n\n        Example:\n            Add an event handler to the story:\n\n                story.add_event(\"click\", \"alert(JSON.stringify(event.detail));\")\n        \"\"\"\n\n        self._events.append(\n            f\"chart.on('{event}', event =&gt; {{{' '.join(handler.split())}}});\"\n        )\n\n    def add_plugin(\n        self, plugin: str, options: Optional[dict] = None, name: str = \"default\"\n    ) -&gt; None:\n        \"\"\"\n        A method for register plugins of the chart.\n\n        Args:\n            plugin: The package name or the url of the plugin.\n            options: The plugin constructor options.\n            name: The name of the plugin (default `default`).\n        \"\"\"\n\n        if options is None:\n            options = {}\n\n        self._plugins.append(\n            \"plugins.push({\"\n            + f\"plugin: '{plugin}', \"\n            + f\"options: {json.dumps(options, cls=RawJavaScriptEncoder)}, \"\n            + f\"name: '{name}'\"\n            + \"})\"\n        )\n\n    def set_size(\n        self,\n        width: Optional[Union[int, float, str]] = None,\n        height: Optional[Union[int, float, str]] = None,\n        aspect_ratio: Optional[Union[int, float, str]] = None,\n    ) -&gt; None:\n        \"\"\"\n        A method for setting width/height settings.\n\n        Args:\n            width: The width of the presentation story.\n            height: The height of the presentation story.\n            aspect_ratio: The aspect ratio of the presentation story.\n\n        Example:\n            Change the size of the story:\n\n                story.set_size(\"100%\", \"400px\")\n        \"\"\"\n\n        self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio)\n\n    def _repr_html_(self) -&gt; str:\n        return self.to_html()\n\n    def to_html(self) -&gt; str:\n        \"\"\"\n        A method for assembling the `HTML` code.\n\n        Returns:\n            The assembled `HTML` code as string.\n        \"\"\"\n\n        vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\"\n        return DISPLAY_TEMPLATE.format(\n            id=uuid.uuid4().hex[:7],\n            version=__version__,\n            analytics=str(self._analytics).lower(),\n            vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\",\n            vizzu_story=self._vizzu_story,\n            vizzu_player_data=vizzu_player_data,\n            start_slide=(\n                f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\"\n            ),\n            chart_size=self._size.style,\n            chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features),\n            chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events),\n            chart_plugins=f\"\\n{DISPLAY_INDENT * 3}\".join(self._plugins),\n        )\n\n    def export_to_html(self, filename: PathLike) -&gt; None:\n        \"\"\"\n        A method for exporting the story into `HTML` file.\n\n        Args:\n            filename: The path of the target `HTML` file.\n        \"\"\"\n\n        with open(filename, \"w\", encoding=\"utf8\") as file_desc:\n            file_desc.write(self.to_html())</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.analytics","title":"<code>analytics</code>  <code>property</code> <code>writable</code>","text":"<p>A property for enabling/disabling the usage statistics feature.</p> <p>The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users.</p> <p>We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only.</p> <p>Please note that even when this feature is enabled, publishing anything made with <code>ipyvizzu-story</code> remains GDPR compatible.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The value of the property (default <code>True</code>).</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.vizzu","title":"<code>vizzu</code>  <code>property</code> <code>writable</code>","text":"<p>A property for changing <code>vizzu</code> url.</p> Note <p>If <code>None</code>, vizzu url is set by <code>vizzu-story</code>.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p><code>Vizzu</code> url.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.vizzu_story","title":"<code>vizzu_story</code>  <code>property</code> <code>writable</code>","text":"<p>A property for changing <code>vizzu-story</code> url.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>Vizzu-story</code> url.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.start_slide","title":"<code>start_slide</code>  <code>property</code> <code>writable</code>","text":"<p>A property for setting the starter slide.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>Number of the starter slide.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>data</code> is not <code>ipyvizzu.Data</code>.</p> <code>TypeError</code> <p>If the type of the <code>style</code> is not <code>ipyvizzu.Style</code>.</p> Example <p>Initialize a story with data and without style:</p> <pre><code>data = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\nstory = Story(data=data)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n\n    Raises:\n        TypeError: If the type of the `data` is not `ipyvizzu.Data`.\n        TypeError: If the type of the `style` is not `ipyvizzu.Style`.\n\n    Example:\n        Initialize a story with data and without style:\n\n            data = Data()\n            data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\n            data.add_series(\"Bar\", [15, 32, 12])\n            data.add_series(\"Baz\", [5, 3, 2])\n\n            story = Story(data=data)\n    \"\"\"\n\n    super().__init__()\n\n    self._analytics = True\n    self._vizzu: Optional[str] = None\n    self._vizzu_story: str = VIZZU_STORY\n    self._start_slide: Optional[int] = None\n\n    self._size: StorySize = StorySize()\n\n    self._features: List[str] = []\n    self._events: List[str] = []\n    self._plugins: List[str] = []\n\n    if not data or type(data) != Data:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Data.\")\n    self.update(data.build())\n\n    if style:\n        if type(style) != Style:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Style.\")\n        self.update(style.build())\n\n    self[\"slides\"] = []</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.add_slide","title":"<code>add_slide(slide)</code>","text":"<p>A method for adding a slide for the story.</p> <p>Parameters:</p> Name Type Description Default <code>slide</code> <code>Slide</code> <p>The next slide of the story.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>slide</code> is not Slide.</p> Example <p>Add a slide to the story:</p> <pre><code>story.add_slide(\n    Slide(\n        Step(\n            Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n        )\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_slide(self, slide: Slide) -&gt; None:\n    \"\"\"\n    A method for adding a slide for the story.\n\n    Args:\n        slide: The next slide of the story.\n\n    Raises:\n        TypeError: If the type of the `slide` is not\n            [Slide][ipyvizzustory.storylib.story.Slide].\n\n    Example:\n        Add a slide to the story:\n\n            story.add_slide(\n                Slide(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n            )\n    \"\"\"\n\n    if not slide or type(slide) != Slide:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Slide.\")\n    self[\"slides\"].append(slide)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.set_feature","title":"<code>set_feature(name, enabled)</code>","text":"<p>A method for enabling or disabling a feature of the story.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the feature.</p> required <code>enabled</code> <code>bool</code> <p><code>True</code> if enabled or <code>False</code> if disabled.</p> required Example <p>Set a feature of the story, for example enable the tooltip:</p> <pre><code>story.set_feature(\"tooltip\", True)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def set_feature(self, name: str, enabled: bool) -&gt; None:\n    \"\"\"\n    A method for enabling or disabling a feature of the story.\n\n    Args:\n        name: The name of the feature.\n        enabled: `True` if enabled or `False` if disabled.\n\n    Example:\n        Set a feature of the story, for example enable the tooltip:\n\n            story.set_feature(\"tooltip\", True)\n    \"\"\"\n\n    self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\")</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.add_event","title":"<code>add_event(event, handler)</code>","text":"<p>A method for creating and turning on an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The type of the event.</p> required <code>handler</code> <code>str</code> <p>The handler <code>JavaScript</code> expression as string.</p> required Example <p>Add an event handler to the story:</p> <pre><code>story.add_event(\"click\", \"alert(JSON.stringify(event.detail));\")</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_event(self, event: str, handler: str) -&gt; None:\n    \"\"\"\n    A method for creating and turning on an event handler.\n\n    Args:\n        event: The type of the event.\n        handler: The handler `JavaScript` expression as string.\n\n    Example:\n        Add an event handler to the story:\n\n            story.add_event(\"click\", \"alert(JSON.stringify(event.detail));\")\n    \"\"\"\n\n    self._events.append(\n        f\"chart.on('{event}', event =&gt; {{{' '.join(handler.split())}}});\"\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.add_plugin","title":"<code>add_plugin(plugin, options=None, name='default')</code>","text":"<p>A method for register plugins of the chart.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>str</code> <p>The package name or the url of the plugin.</p> required <code>options</code> <code>Optional[dict]</code> <p>The plugin constructor options.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the plugin (default <code>default</code>).</p> <code>'default'</code> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_plugin(\n    self, plugin: str, options: Optional[dict] = None, name: str = \"default\"\n) -&gt; None:\n    \"\"\"\n    A method for register plugins of the chart.\n\n    Args:\n        plugin: The package name or the url of the plugin.\n        options: The plugin constructor options.\n        name: The name of the plugin (default `default`).\n    \"\"\"\n\n    if options is None:\n        options = {}\n\n    self._plugins.append(\n        \"plugins.push({\"\n        + f\"plugin: '{plugin}', \"\n        + f\"options: {json.dumps(options, cls=RawJavaScriptEncoder)}, \"\n        + f\"name: '{name}'\"\n        + \"})\"\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.set_size","title":"<code>set_size(width=None, height=None, aspect_ratio=None)</code>","text":"<p>A method for setting width/height settings.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>Optional[Union[int, float, str]]</code> <p>The width of the presentation story.</p> <code>None</code> <code>height</code> <code>Optional[Union[int, float, str]]</code> <p>The height of the presentation story.</p> <code>None</code> <code>aspect_ratio</code> <code>Optional[Union[int, float, str]]</code> <p>The aspect ratio of the presentation story.</p> <code>None</code> Example <p>Change the size of the story:</p> <pre><code>story.set_size(\"100%\", \"400px\")</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def set_size(\n    self,\n    width: Optional[Union[int, float, str]] = None,\n    height: Optional[Union[int, float, str]] = None,\n    aspect_ratio: Optional[Union[int, float, str]] = None,\n) -&gt; None:\n    \"\"\"\n    A method for setting width/height settings.\n\n    Args:\n        width: The width of the presentation story.\n        height: The height of the presentation story.\n        aspect_ratio: The aspect ratio of the presentation story.\n\n    Example:\n        Change the size of the story:\n\n            story.set_size(\"100%\", \"400px\")\n    \"\"\"\n\n    self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.to_html","title":"<code>to_html()</code>","text":"<p>A method for assembling the <code>HTML</code> code.</p> <p>Returns:</p> Type Description <code>str</code> <p>The assembled <code>HTML</code> code as string.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def to_html(self) -&gt; str:\n    \"\"\"\n    A method for assembling the `HTML` code.\n\n    Returns:\n        The assembled `HTML` code as string.\n    \"\"\"\n\n    vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\"\n    return DISPLAY_TEMPLATE.format(\n        id=uuid.uuid4().hex[:7],\n        version=__version__,\n        analytics=str(self._analytics).lower(),\n        vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\",\n        vizzu_story=self._vizzu_story,\n        vizzu_player_data=vizzu_player_data,\n        start_slide=(\n            f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\"\n        ),\n        chart_size=self._size.style,\n        chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features),\n        chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events),\n        chart_plugins=f\"\\n{DISPLAY_INDENT * 3}\".join(self._plugins),\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.export_to_html","title":"<code>export_to_html(filename)</code>","text":"<p>A method for exporting the story into <code>HTML</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>PathLike</code> <p>The path of the target <code>HTML</code> file.</p> required Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def export_to_html(self, filename: PathLike) -&gt; None:\n    \"\"\"\n    A method for exporting the story into `HTML` file.\n\n    Args:\n        filename: The path of the target `HTML` file.\n    \"\"\"\n\n    with open(filename, \"w\", encoding=\"utf8\") as file_desc:\n        file_desc.write(self.to_html())</code></pre>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template","title":"<code>ipyvizzustory.storylib.template</code>","text":"<p>A module for storing the <code>HTML</code> templates.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template.VIZZU_STORY","title":"<code>VIZZU_STORY = 'https://cdn.jsdelivr.net/npm/vizzu-story@0.8/dist/vizzu-story.min.js'</code>  <code>module-attribute</code>","text":"<p>A variable for storing the default url of the <code>vizzu-story</code> package.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template.DISPLAY_INDENT","title":"<code>DISPLAY_INDENT = '    '</code>  <code>module-attribute</code>","text":"<p>A variable for storing the default indent in the <code>HTML</code> template.</p>"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template.DISPLAY_TEMPLATE","title":"<code>DISPLAY_TEMPLATE = '\\n&lt;div&gt;\\n    &lt;vizzu-player id=\"{id}\" {vizzu} {start_slide} controller&gt;&lt;/vizzu-player&gt;\\n    &lt;script type=\"module\"&gt;\\n        import VizzuPlayer from \"{vizzu_story}\";\\n\\n        class IpyvizzuStory {{\\n            static version = \"{version}\";\\n            static analytics = undefined;\\n\\n            static changeAnalyticsTo(analytics) {{\\n                if (IpyvizzuStory.analytics !== analytics) {{\\n                    console.log(\"ipyvizzu-story gather usage stats:\", analytics);\\n                    IpyvizzuStory.analytics = analytics;\\n                }}\\n                if (analytics) {{\\n                    IpyvizzuStory._addHeadScript();\\n                }} else {{\\n                    IpyvizzuStory._removeScript(\"ipyvizzu-story-analytics-head\");\\n                }}\\n            }}\\n\\n            static _addHeadScript() {{\\n                const scriptId = \"ipyvizzu-story-analytics-head\";\\n                if (!IpyvizzuStory._isScriptAppended(scriptId)) {{\\n                    const script = document.createElement(\"script\");\\n                    script.defer = true;\\n                    script.src = \"https://plausible.io/js/script.local.js\";\\n                    script.dataset.domain = \"usage.ipyvizzu-story.com\";\\n                    script.id = scriptId;\\n                    document.getElementsByTagName(\"head\")[0].appendChild(script);\\n                }}\\n            }}\\n\\n            static _isScriptAppended(id) {{\\n                return document.querySelector(`script[id=\"${{id}}\"]`) !== null;\\n            }}\\n\\n            static _removeScript(id) {{\\n                const script = document.getElementById(id);\\n                if (script) script.remove();\\n            }}\\n        }}\\n\\n        if (IpyvizzuStory.version !== window.IpyvizzuStory?.version) {{\\n            window.IpyvizzuStory = IpyvizzuStory;\\n            console.log(`ipyvizzu-story ${{IpyvizzuStory.version}}`);\\n        }}\\n\\n        window.IpyvizzuStory?.changeAnalyticsTo({analytics});\\n\\n        class Plugins {{\\n            static _resolveVizzuVersion(vp) {{\\n                const url = vp.vizzuUrl;\\n                const versionMatch = url.match(/vizzu@([^\\\\/]+)\\\\//);\\n                return versionMatch[1];\\n            }}\\n\\n            static _resolveUrl(plugin, tag) {{\\n                if (!plugin.includes(\\'/\\')) {{\\n                    const jsdelivr = \"https://cdn.jsdelivr.net/npm/@vizzu\";\\n                    return `${{jsdelivr}}/${{plugin}}@${{tag}}/dist/mjs/index.min.js`;\\n                }}\\n                return plugin;\\n            }}\\n\\n            static register(vp, chart, plugins) {{\\n                const tag = `vizzu-${{Plugins._resolveVizzuVersion(vp)}}`;\\n                const pluginsRegistered = [];\\n                for (const plugin of plugins) {{\\n                    const pluginUrl = Plugins._resolveUrl(plugin.plugin, tag);\\n                    const pluginRegistered = import(pluginUrl).then(pluginModule =&gt; {{\\n                        const pluginInstance = new pluginModule[plugin.name](plugin.options);\\n                        chart.feature(pluginInstance, true);\\n                    }}).catch((error) =&gt; {{\\n                        console.error(\\'Error importing plugin:\\', pluginUrl, error)\\n                    }});\\n                    pluginsRegistered.push(pluginRegistered);\\n                }}\\n                return Promise.all(pluginsRegistered);\\n            }}\\n        }}\\n\\n        const vp = document.getElementById(\"{id}\");\\n        vp.initializing.then(chart =&gt; {{\\n            const lib = vp.Vizzu;\\n\\n            // story.set_size()\\n            {chart_size}\\n\\n            // story.add_plugin()\\n            const plugins = [];\\n            {chart_plugins}\\n            Plugins.register(vp, chart, plugins).then(() =&gt; {{\\n                // story.set_feature()\\n                {chart_features}\\n                // story.add_event()\\n                {chart_events}\\n\\n                const vizzuPlayerData = {vizzu_player_data};\\n                vp.slides = vizzuPlayerData;\\n            }});\\n        }});\\n    &lt;/script&gt;\\n&lt;/div&gt;\\n'</code>  <code>module-attribute</code>","text":"<p>A variable for storing the <code>vizzu-story</code> <code>HTML</code> template.</p>"},{"location":"reference/ipyvizzustory/storylib/animation/","title":"Animation","text":""},{"location":"reference/ipyvizzustory/storylib/animation/#ipyvizzustory.storylib.animation","title":"<code>ipyvizzustory.storylib.animation</code>","text":"<p>A module for working with chart animations.</p>"},{"location":"reference/ipyvizzustory/storylib/animation/#ipyvizzustory.storylib.animation.DataFilter","title":"<code>ipyvizzustory.storylib.animation.DataFilter</code>","text":"<p>               Bases: <code>Data</code></p> <p>A class for representing a data filter.</p> Source code in <code>src/ipyvizzustory/storylib/animation.py</code> <pre><code>class DataFilter(Data):\n    \"\"\"A class for representing a data filter.\"\"\"\n\n    def build(self) -&gt; dict:\n        \"\"\"\n        A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method.\n        Data initialized with a `DataFilter` must contain only a filter.\n\n        Returns:\n            A dictionary contains the filter key with the filter expression.\n\n        Raises:\n            ValueError: If `DataFilter` does not contain a filter or contains anything else.\n        \"\"\"\n\n        if len(self.keys()) != 1 or \"filter\" not in self:\n            raise KeyError(\"Data must contain filter and only that.\")\n        return {\"filter\": self[\"filter\"]}</code></pre>"},{"location":"reference/ipyvizzustory/storylib/animation/#ipyvizzustory.storylib.animation.DataFilter.build","title":"<code>build()</code>","text":"<p>A method for overwriting Data.build method. Data initialized with a <code>DataFilter</code> must contain only a filter.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary contains the filter key with the filter expression.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>DataFilter</code> does not contain a filter or contains anything else.</p> Source code in <code>src/ipyvizzustory/storylib/animation.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"\n    A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method.\n    Data initialized with a `DataFilter` must contain only a filter.\n\n    Returns:\n        A dictionary contains the filter key with the filter expression.\n\n    Raises:\n        ValueError: If `DataFilter` does not contain a filter or contains anything else.\n    \"\"\"\n\n    if len(self.keys()) != 1 or \"filter\" not in self:\n        raise KeyError(\"Data must contain filter and only that.\")\n    return {\"filter\": self[\"filter\"]}</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/","title":"Story","text":""},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story","title":"<code>ipyvizzustory.storylib.story</code>","text":"<p>A module for working with presentation stories.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Step","title":"<code>ipyvizzustory.storylib.story.Step</code>","text":"<p>               Bases: <code>dict</code></p> <p>A class for representing a step of a slide.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Step(dict):\n    \"\"\"A class for representing a step of a slide.\"\"\"\n\n    def __init__(\n        self,\n        *animations: Union[Data, Style, Config],\n        **anim_options: Optional[Union[str, int, float, dict]],\n    ):\n        \"\"\"\n        Step constructor.\n\n        Args:\n            *animations: List of [Data][ipyvizzu.Data],\n                [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects.\n                A `Step` can contain each of the above once.\n            **anim_options: Animation options such as duration.\n\n        Raises:\n            ValueError: If `animations` are not set.\n\n        Example:\n            Initialize a step with a [Config][ipyvizzu.Config] object:\n\n                step = Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n        \"\"\"\n\n        super().__init__()\n        if not animations:\n            raise ValueError(\"No animation was set.\")\n        self._update(*animations)\n\n        if anim_options:\n            self[\"animOptions\"] = anim_options\n\n    def _update(self, *animations: Union[Data, Style, Config]) -&gt; None:\n        for animation in animations:\n            if not animation or type(animation) not in [\n                Data,\n                Style,\n                Config,\n            ]:  # pylint: disable=unidiomatic-typecheck\n                raise TypeError(\"Type must be Data, Style or Config.\")\n            if type(animation) == Data:  # pylint: disable=unidiomatic-typecheck\n                animation = DataFilter(animation)\n\n            builded_animation = animation.build()\n            common_keys = set(builded_animation).intersection(set(self))\n            if common_keys:\n                raise ValueError(f\"Animation is already merged: {common_keys}\")\n            self.update(builded_animation)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Step.__init__","title":"<code>__init__(*animations, **anim_options)</code>","text":"<p>Step constructor.</p> <p>Parameters:</p> Name Type Description Default <code>*animations</code> <code>Union[Data, Style, Config]</code> <p>List of Data, Config and Style objects. A <code>Step</code> can contain each of the above once.</p> <code>()</code> <code>**anim_options</code> <code>Optional[Union[str, int, float, dict]]</code> <p>Animation options such as duration.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>animations</code> are not set.</p> Example <p>Initialize a step with a Config object:</p> <pre><code>step = Step(\n    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(\n    self,\n    *animations: Union[Data, Style, Config],\n    **anim_options: Optional[Union[str, int, float, dict]],\n):\n    \"\"\"\n    Step constructor.\n\n    Args:\n        *animations: List of [Data][ipyvizzu.Data],\n            [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects.\n            A `Step` can contain each of the above once.\n        **anim_options: Animation options such as duration.\n\n    Raises:\n        ValueError: If `animations` are not set.\n\n    Example:\n        Initialize a step with a [Config][ipyvizzu.Config] object:\n\n            step = Step(\n                Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n            )\n    \"\"\"\n\n    super().__init__()\n    if not animations:\n        raise ValueError(\"No animation was set.\")\n    self._update(*animations)\n\n    if anim_options:\n        self[\"animOptions\"] = anim_options</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Slide","title":"<code>ipyvizzustory.storylib.story.Slide</code>","text":"<p>               Bases: <code>list</code></p> <p>A class for representing a slide of a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Slide(list):\n    \"\"\"A class for representing a slide of a presentation story.\"\"\"\n\n    def __init__(self, step: Optional[Step] = None):\n        \"\"\"\n        Slide constructor.\n\n        Args:\n            step: The first step can also be added to the slide in the constructor.\n\n        Example:\n            Initialize a slide without step:\n\n                slide = Slide()\n\n            Initialize a slide with a step:\n\n                slide = Slide(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n        \"\"\"\n\n        super().__init__()\n        if step:\n            self.add_step(step)\n\n    def add_step(self, step: Step) -&gt; None:\n        \"\"\"\n        A method for adding a step for the slide.\n\n        Args:\n            step: The next step of the slide.\n\n        Raises:\n            TypeError: If the type of the `step` is not\n                [Step][ipyvizzustory.storylib.story.Step].\n\n        Example:\n            Add steps to a slide:\n\n                slide = Slide()\n                slide.add_step(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n                slide.add_step(\n                    Step(\n                        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n                    )\n                )\n        \"\"\"\n\n        if not step or type(step) != Step:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Step.\")\n        self.append(step)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Slide.__init__","title":"<code>__init__(step=None)</code>","text":"<p>Slide constructor.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>Optional[Step]</code> <p>The first step can also be added to the slide in the constructor.</p> <code>None</code> Example <p>Initialize a slide without step:</p> <pre><code>slide = Slide()</code></pre> <p>Initialize a slide with a step:</p> <pre><code>slide = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(self, step: Optional[Step] = None):\n    \"\"\"\n    Slide constructor.\n\n    Args:\n        step: The first step can also be added to the slide in the constructor.\n\n    Example:\n        Initialize a slide without step:\n\n            slide = Slide()\n\n        Initialize a slide with a step:\n\n            slide = Slide(\n                Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n            )\n    \"\"\"\n\n    super().__init__()\n    if step:\n        self.add_step(step)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Slide.add_step","title":"<code>add_step(step)</code>","text":"<p>A method for adding a step for the slide.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>Step</code> <p>The next step of the slide.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>step</code> is not Step.</p> Example <p>Add steps to a slide:</p> <pre><code>slide = Slide()\nslide.add_step(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n    )\n)\nslide.add_step(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_step(self, step: Step) -&gt; None:\n    \"\"\"\n    A method for adding a step for the slide.\n\n    Args:\n        step: The next step of the slide.\n\n    Raises:\n        TypeError: If the type of the `step` is not\n            [Step][ipyvizzustory.storylib.story.Step].\n\n    Example:\n        Add steps to a slide:\n\n            slide = Slide()\n            slide.add_step(\n                Step(\n                    Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                )\n            )\n            slide.add_step(\n                Step(\n                    Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})\n                )\n            )\n    \"\"\"\n\n    if not step or type(step) != Step:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Step.\")\n    self.append(step)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize","title":"<code>ipyvizzustory.storylib.story.StorySize</code>","text":"<p>A class for representing the size of a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class StorySize:\n    \"\"\"A class for representing the size of a presentation story.\"\"\"\n\n    ERROR_MSG_WIDTH_AND_HEIGHT = \"width and height should be in pixels\"\n    ERROR_MSG_WIDTH_OR_HEIGHT = \"width or height should be in pixels\"\n    ERROR_MSG_ASPECT_RATIO = \"aspect_ratio should be a float\"\n\n    def __init__(\n        self,\n        width: Optional[Union[int, float, str]] = None,\n        height: Optional[Union[int, float, str]] = None,\n        aspect_ratio: Optional[Union[int, float, str]] = None,\n    ):\n        \"\"\"\n        StorySize constructor.\n\n        Args:\n            width: The width of a presentation story.\n            height: The height of a presentation story.\n            aspect_ratio: The aspect ratio of a presentation story.\n\n        Raises:\n            ValueError: If width, height and aspect_ratio are set together.\n        \"\"\"\n\n        width = self._convert_to_pixel_or_return(width)\n        height = self._convert_to_pixel_or_return(height)\n\n        self._width = width\n        self._height = height\n        self._aspect_ratio = aspect_ratio\n\n        self._style = \"\"\n        if None not in [width, height, aspect_ratio]:\n            raise ValueError(\n                \"width, height and aspect ratio cannot be set at the same time\"\n            )\n        if all([height is not None, aspect_ratio is not None]):\n            width = \"unset\"\n        if any([width is not None, height is not None, aspect_ratio is not None]):\n            _width = \"\" if width is None else f\"width: {width};\"\n            _height = \"\" if height is None else f\"height: {height};\"\n            _aspect_ratio = (\n                \"\"\n                if aspect_ratio is None\n                else f\"aspect-ratio: {aspect_ratio} !important;\"\n            )\n            self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\"\n\n    @staticmethod\n    def _convert_to_pixel_or_return(value: Any) -&gt; Optional[str]:\n        if StorySize._is_int(value) or StorySize._is_float(value):\n            return str(value) + \"px\"\n        return value\n\n    @staticmethod\n    def _is_int(value: Any) -&gt; bool:\n        if isinstance(value, int):\n            return True\n        if isinstance(value, str):\n            if re.search(r\"^[-+]?[0-9]+$\", value):\n                return True\n        return False\n\n    @staticmethod\n    def _is_float(value: Any) -&gt; bool:\n        if isinstance(value, float):\n            return True\n        if isinstance(value, str):\n            if re.search(r\"^[+-]?[0-9]+\\.[0-9]+$\", value):\n                return True\n        return False\n\n    @property\n    def width(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for storing the width of a presentation story.\n\n        Returns:\n            The width of a presentation story.\n        \"\"\"\n\n        return self._width\n\n    @property\n    def height(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for storing the height of a presentation story.\n\n        Returns:\n            The height of a presentation story.\n        \"\"\"\n\n        return self._height\n\n    @property\n    def aspect_ratio(self) -&gt; Optional[Union[int, float, str]]:\n        \"\"\"\n        A property for storing the aspect ratio of a presentation story.\n\n        Returns:\n            The aspect ratio of a presentation story.\n        \"\"\"\n\n        return self._aspect_ratio\n\n    @property\n    def style(self) -&gt; str:\n        \"\"\"\n        A property for storing the style of a presentation story.\n\n        Note:\n            If neither `width`, `height` nor `aspect_ratio` is set, it returns an empty string.\n\n        Returns:\n            The cssText width and height of a presentation story.\n        \"\"\"\n\n        return self._style\n\n    @staticmethod\n    def is_pixel(value: Any) -&gt; bool:\n        \"\"\"\n        A static method for checking the type of the given value.\n\n        Args:\n            value: The value to check.\n\n        Returns:\n            `True` if the value is pixel, `False` otherwise.\n        \"\"\"\n\n        if StorySize._is_int(value) or StorySize._is_float(value):\n            return True\n        if isinstance(value, str) and value.endswith(\"px\"):\n            if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]):\n                return True\n        return False\n\n    def get_width_height_in_pixels(self) -&gt; Tuple[int, int]:\n        \"\"\"\n        A method for returning the width and height in pixels.\n\n        Raises:\n            ValueError: If width and height are not in pixels when aspect_ratio is not set.\n            ValueError: If width or height is not in pixel when aspect_ratio is set.\n            ValueError: If aspect_ratio is not a float when aspect_ratio is set.\n\n        Returns:\n            The width and height in pixels as int.\n        \"\"\"\n\n        if self.aspect_ratio is None:\n            if any(\n                [\n                    not StorySize.is_pixel(self.width),\n                    not StorySize.is_pixel(self.height),\n                ]\n            ):\n                raise ValueError(StorySize.ERROR_MSG_WIDTH_AND_HEIGHT)\n            _width = int(float(self.width[:-2]))  # type: ignore\n            _height = int(float(self.height[:-2]))  # type: ignore\n        else:\n            if not any(\n                [\n                    StorySize._is_int(self.aspect_ratio),\n                    StorySize._is_float(self.aspect_ratio),\n                ]\n            ):\n                raise ValueError(StorySize.ERROR_MSG_ASPECT_RATIO)\n            if not any(\n                [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)]\n            ):\n                raise ValueError(StorySize.ERROR_MSG_WIDTH_OR_HEIGHT)\n            _aspect_ratio = float(self.aspect_ratio)\n            if StorySize.is_pixel(self.width):\n                _width = float(self.width[:-2])  # type: ignore\n                _height = int(_width / _aspect_ratio)\n                _width = int(_width)\n            else:\n                _height = float(self.height[:-2])  # type: ignore\n                _width = int(_height * _aspect_ratio)\n                _height = int(_height)\n        return (_width, _height)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.width","title":"<code>width</code>  <code>property</code>","text":"<p>A property for storing the width of a presentation story.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The width of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.height","title":"<code>height</code>  <code>property</code>","text":"<p>A property for storing the height of a presentation story.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The height of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.aspect_ratio","title":"<code>aspect_ratio</code>  <code>property</code>","text":"<p>A property for storing the aspect ratio of a presentation story.</p> <p>Returns:</p> Type Description <code>Optional[Union[int, float, str]]</code> <p>The aspect ratio of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.style","title":"<code>style</code>  <code>property</code>","text":"<p>A property for storing the style of a presentation story.</p> Note <p>If neither <code>width</code>, <code>height</code> nor <code>aspect_ratio</code> is set, it returns an empty string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The cssText width and height of a presentation story.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.__init__","title":"<code>__init__(width=None, height=None, aspect_ratio=None)</code>","text":"<p>StorySize constructor.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>Optional[Union[int, float, str]]</code> <p>The width of a presentation story.</p> <code>None</code> <code>height</code> <code>Optional[Union[int, float, str]]</code> <p>The height of a presentation story.</p> <code>None</code> <code>aspect_ratio</code> <code>Optional[Union[int, float, str]]</code> <p>The aspect ratio of a presentation story.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If width, height and aspect_ratio are set together.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(\n    self,\n    width: Optional[Union[int, float, str]] = None,\n    height: Optional[Union[int, float, str]] = None,\n    aspect_ratio: Optional[Union[int, float, str]] = None,\n):\n    \"\"\"\n    StorySize constructor.\n\n    Args:\n        width: The width of a presentation story.\n        height: The height of a presentation story.\n        aspect_ratio: The aspect ratio of a presentation story.\n\n    Raises:\n        ValueError: If width, height and aspect_ratio are set together.\n    \"\"\"\n\n    width = self._convert_to_pixel_or_return(width)\n    height = self._convert_to_pixel_or_return(height)\n\n    self._width = width\n    self._height = height\n    self._aspect_ratio = aspect_ratio\n\n    self._style = \"\"\n    if None not in [width, height, aspect_ratio]:\n        raise ValueError(\n            \"width, height and aspect ratio cannot be set at the same time\"\n        )\n    if all([height is not None, aspect_ratio is not None]):\n        width = \"unset\"\n    if any([width is not None, height is not None, aspect_ratio is not None]):\n        _width = \"\" if width is None else f\"width: {width};\"\n        _height = \"\" if height is None else f\"height: {height};\"\n        _aspect_ratio = (\n            \"\"\n            if aspect_ratio is None\n            else f\"aspect-ratio: {aspect_ratio} !important;\"\n        )\n        self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\"</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.is_pixel","title":"<code>is_pixel(value)</code>  <code>staticmethod</code>","text":"<p>A static method for checking the type of the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the value is pixel, <code>False</code> otherwise.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>@staticmethod\ndef is_pixel(value: Any) -&gt; bool:\n    \"\"\"\n    A static method for checking the type of the given value.\n\n    Args:\n        value: The value to check.\n\n    Returns:\n        `True` if the value is pixel, `False` otherwise.\n    \"\"\"\n\n    if StorySize._is_int(value) or StorySize._is_float(value):\n        return True\n    if isinstance(value, str) and value.endswith(\"px\"):\n        if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]):\n            return True\n    return False</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.get_width_height_in_pixels","title":"<code>get_width_height_in_pixels()</code>","text":"<p>A method for returning the width and height in pixels.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If width and height are not in pixels when aspect_ratio is not set.</p> <code>ValueError</code> <p>If width or height is not in pixel when aspect_ratio is set.</p> <code>ValueError</code> <p>If aspect_ratio is not a float when aspect_ratio is set.</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>The width and height in pixels as int.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def get_width_height_in_pixels(self) -&gt; Tuple[int, int]:\n    \"\"\"\n    A method for returning the width and height in pixels.\n\n    Raises:\n        ValueError: If width and height are not in pixels when aspect_ratio is not set.\n        ValueError: If width or height is not in pixel when aspect_ratio is set.\n        ValueError: If aspect_ratio is not a float when aspect_ratio is set.\n\n    Returns:\n        The width and height in pixels as int.\n    \"\"\"\n\n    if self.aspect_ratio is None:\n        if any(\n            [\n                not StorySize.is_pixel(self.width),\n                not StorySize.is_pixel(self.height),\n            ]\n        ):\n            raise ValueError(StorySize.ERROR_MSG_WIDTH_AND_HEIGHT)\n        _width = int(float(self.width[:-2]))  # type: ignore\n        _height = int(float(self.height[:-2]))  # type: ignore\n    else:\n        if not any(\n            [\n                StorySize._is_int(self.aspect_ratio),\n                StorySize._is_float(self.aspect_ratio),\n            ]\n        ):\n            raise ValueError(StorySize.ERROR_MSG_ASPECT_RATIO)\n        if not any(\n            [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)]\n        ):\n            raise ValueError(StorySize.ERROR_MSG_WIDTH_OR_HEIGHT)\n        _aspect_ratio = float(self.aspect_ratio)\n        if StorySize.is_pixel(self.width):\n            _width = float(self.width[:-2])  # type: ignore\n            _height = int(_width / _aspect_ratio)\n            _width = int(_width)\n        else:\n            _height = float(self.height[:-2])  # type: ignore\n            _width = int(_height * _aspect_ratio)\n            _height = int(_height)\n    return (_width, _height)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story","title":"<code>ipyvizzustory.storylib.story.Story</code>","text":"<p>               Bases: <code>dict</code></p> <p>A class for representing a presentation story.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>class Story(dict):\n    \"\"\"A class for representing a presentation story.\"\"\"\n\n    # pylint: disable=too-many-instance-attributes\n\n    def __init__(self, data: Data, style: Optional[Style] = None):\n        \"\"\"\n        Presentation Story constructor.\n\n        Args:\n            data: Data set for the whole presentation story.\n                After initialization `data` can not be modified,\n                but it can be filtered.\n            style: Style settings for the presentation story.\n                `style` can be changed at each presentation step.\n\n        Raises:\n            TypeError: If the type of the `data` is not `ipyvizzu.Data`.\n            TypeError: If the type of the `style` is not `ipyvizzu.Style`.\n\n        Example:\n            Initialize a story with data and without style:\n\n                data = Data()\n                data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\n                data.add_series(\"Bar\", [15, 32, 12])\n                data.add_series(\"Baz\", [5, 3, 2])\n\n                story = Story(data=data)\n        \"\"\"\n\n        super().__init__()\n\n        self._analytics = True\n        self._vizzu: Optional[str] = None\n        self._vizzu_story: str = VIZZU_STORY\n        self._start_slide: Optional[int] = None\n\n        self._size: StorySize = StorySize()\n\n        self._features: List[str] = []\n        self._events: List[str] = []\n        self._plugins: List[str] = []\n\n        if not data or type(data) != Data:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Data.\")\n        self.update(data.build())\n\n        if style:\n            if type(style) != Style:  # pylint: disable=unidiomatic-typecheck\n                raise TypeError(\"Type must be Style.\")\n            self.update(style.build())\n\n        self[\"slides\"] = []\n\n    @property\n    def analytics(self) -&gt; bool:\n        \"\"\"\n        A property for enabling/disabling the usage statistics feature.\n\n        The usage statistics feature allows aggregate usage data collection\n        using Plausible's algorithm.\n        Enabling this feature helps us follow the progress and overall trends of our library,\n        allowing us to focus our resources effectively and better serve our users.\n\n        We do not track, collect, or store any personal data or personally identifiable information.\n        All data is isolated to a single day, a single site, and a single device only.\n\n        Please note that even when this feature is enabled,\n        publishing anything made with `ipyvizzu-story` remains GDPR compatible.\n\n        Returns:\n            The value of the property (default `True`).\n        \"\"\"\n\n        return self._analytics\n\n    @analytics.setter\n    def analytics(self, analytics: Optional[bool]):\n        self._analytics = bool(analytics)\n\n    @property\n    def vizzu(self) -&gt; Optional[str]:\n        \"\"\"\n        A property for changing `vizzu` url.\n\n        Note:\n            If `None`, vizzu url is set by `vizzu-story`.\n\n        Returns:\n            `Vizzu` url.\n        \"\"\"\n\n        return self._vizzu\n\n    @vizzu.setter\n    def vizzu(self, url: str) -&gt; None:\n        self._vizzu = url\n\n    @property\n    def vizzu_story(self) -&gt; str:\n        \"\"\"\n        A property for changing `vizzu-story` url.\n\n        Returns:\n            `Vizzu-story` url.\n        \"\"\"\n\n        return self._vizzu_story\n\n    @vizzu_story.setter\n    def vizzu_story(self, url: str) -&gt; None:\n        self._vizzu_story = url\n\n    @property\n    def start_slide(self) -&gt; Optional[int]:\n        \"\"\"\n        A property for setting the starter slide.\n\n        Returns:\n            Number of the starter slide.\n        \"\"\"\n\n        return self._start_slide\n\n    @start_slide.setter\n    def start_slide(self, number: int) -&gt; None:\n        self._start_slide = number\n\n    def add_slide(self, slide: Slide) -&gt; None:\n        \"\"\"\n        A method for adding a slide for the story.\n\n        Args:\n            slide: The next slide of the story.\n\n        Raises:\n            TypeError: If the type of the `slide` is not\n                [Slide][ipyvizzustory.storylib.story.Slide].\n\n        Example:\n            Add a slide to the story:\n\n                story.add_slide(\n                    Slide(\n                        Step(\n                            Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                        )\n                    )\n                )\n        \"\"\"\n\n        if not slide or type(slide) != Slide:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Slide.\")\n        self[\"slides\"].append(slide)\n\n    def set_feature(self, name: str, enabled: bool) -&gt; None:\n        \"\"\"\n        A method for enabling or disabling a feature of the story.\n\n        Args:\n            name: The name of the feature.\n            enabled: `True` if enabled or `False` if disabled.\n\n        Example:\n            Set a feature of the story, for example enable the tooltip:\n\n                story.set_feature(\"tooltip\", True)\n        \"\"\"\n\n        self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\")\n\n    def add_event(self, event: str, handler: str) -&gt; None:\n        \"\"\"\n        A method for creating and turning on an event handler.\n\n        Args:\n            event: The type of the event.\n            handler: The handler `JavaScript` expression as string.\n\n        Example:\n            Add an event handler to the story:\n\n                story.add_event(\"click\", \"alert(JSON.stringify(event.detail));\")\n        \"\"\"\n\n        self._events.append(\n            f\"chart.on('{event}', event =&gt; {{{' '.join(handler.split())}}});\"\n        )\n\n    def add_plugin(\n        self, plugin: str, options: Optional[dict] = None, name: str = \"default\"\n    ) -&gt; None:\n        \"\"\"\n        A method for register plugins of the chart.\n\n        Args:\n            plugin: The package name or the url of the plugin.\n            options: The plugin constructor options.\n            name: The name of the plugin (default `default`).\n        \"\"\"\n\n        if options is None:\n            options = {}\n\n        self._plugins.append(\n            \"plugins.push({\"\n            + f\"plugin: '{plugin}', \"\n            + f\"options: {json.dumps(options, cls=RawJavaScriptEncoder)}, \"\n            + f\"name: '{name}'\"\n            + \"})\"\n        )\n\n    def set_size(\n        self,\n        width: Optional[Union[int, float, str]] = None,\n        height: Optional[Union[int, float, str]] = None,\n        aspect_ratio: Optional[Union[int, float, str]] = None,\n    ) -&gt; None:\n        \"\"\"\n        A method for setting width/height settings.\n\n        Args:\n            width: The width of the presentation story.\n            height: The height of the presentation story.\n            aspect_ratio: The aspect ratio of the presentation story.\n\n        Example:\n            Change the size of the story:\n\n                story.set_size(\"100%\", \"400px\")\n        \"\"\"\n\n        self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio)\n\n    def _repr_html_(self) -&gt; str:\n        return self.to_html()\n\n    def to_html(self) -&gt; str:\n        \"\"\"\n        A method for assembling the `HTML` code.\n\n        Returns:\n            The assembled `HTML` code as string.\n        \"\"\"\n\n        vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\"\n        return DISPLAY_TEMPLATE.format(\n            id=uuid.uuid4().hex[:7],\n            version=__version__,\n            analytics=str(self._analytics).lower(),\n            vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\",\n            vizzu_story=self._vizzu_story,\n            vizzu_player_data=vizzu_player_data,\n            start_slide=(\n                f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\"\n            ),\n            chart_size=self._size.style,\n            chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features),\n            chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events),\n            chart_plugins=f\"\\n{DISPLAY_INDENT * 3}\".join(self._plugins),\n        )\n\n    def export_to_html(self, filename: PathLike) -&gt; None:\n        \"\"\"\n        A method for exporting the story into `HTML` file.\n\n        Args:\n            filename: The path of the target `HTML` file.\n        \"\"\"\n\n        with open(filename, \"w\", encoding=\"utf8\") as file_desc:\n            file_desc.write(self.to_html())</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.analytics","title":"<code>analytics</code>  <code>property</code> <code>writable</code>","text":"<p>A property for enabling/disabling the usage statistics feature.</p> <p>The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users.</p> <p>We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only.</p> <p>Please note that even when this feature is enabled, publishing anything made with <code>ipyvizzu-story</code> remains GDPR compatible.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The value of the property (default <code>True</code>).</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.vizzu","title":"<code>vizzu</code>  <code>property</code> <code>writable</code>","text":"<p>A property for changing <code>vizzu</code> url.</p> Note <p>If <code>None</code>, vizzu url is set by <code>vizzu-story</code>.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p><code>Vizzu</code> url.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.vizzu_story","title":"<code>vizzu_story</code>  <code>property</code> <code>writable</code>","text":"<p>A property for changing <code>vizzu-story</code> url.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>Vizzu-story</code> url.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.start_slide","title":"<code>start_slide</code>  <code>property</code> <code>writable</code>","text":"<p>A property for setting the starter slide.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>Number of the starter slide.</p>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.__init__","title":"<code>__init__(data, style=None)</code>","text":"<p>Presentation Story constructor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Data</code> <p>Data set for the whole presentation story. After initialization <code>data</code> can not be modified, but it can be filtered.</p> required <code>style</code> <code>Optional[Style]</code> <p>Style settings for the presentation story. <code>style</code> can be changed at each presentation step.</p> <code>None</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>data</code> is not <code>ipyvizzu.Data</code>.</p> <code>TypeError</code> <p>If the type of the <code>style</code> is not <code>ipyvizzu.Style</code>.</p> Example <p>Initialize a story with data and without style:</p> <pre><code>data = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\nstory = Story(data=data)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def __init__(self, data: Data, style: Optional[Style] = None):\n    \"\"\"\n    Presentation Story constructor.\n\n    Args:\n        data: Data set for the whole presentation story.\n            After initialization `data` can not be modified,\n            but it can be filtered.\n        style: Style settings for the presentation story.\n            `style` can be changed at each presentation step.\n\n    Raises:\n        TypeError: If the type of the `data` is not `ipyvizzu.Data`.\n        TypeError: If the type of the `style` is not `ipyvizzu.Style`.\n\n    Example:\n        Initialize a story with data and without style:\n\n            data = Data()\n            data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\n            data.add_series(\"Bar\", [15, 32, 12])\n            data.add_series(\"Baz\", [5, 3, 2])\n\n            story = Story(data=data)\n    \"\"\"\n\n    super().__init__()\n\n    self._analytics = True\n    self._vizzu: Optional[str] = None\n    self._vizzu_story: str = VIZZU_STORY\n    self._start_slide: Optional[int] = None\n\n    self._size: StorySize = StorySize()\n\n    self._features: List[str] = []\n    self._events: List[str] = []\n    self._plugins: List[str] = []\n\n    if not data or type(data) != Data:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Data.\")\n    self.update(data.build())\n\n    if style:\n        if type(style) != Style:  # pylint: disable=unidiomatic-typecheck\n            raise TypeError(\"Type must be Style.\")\n        self.update(style.build())\n\n    self[\"slides\"] = []</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.add_slide","title":"<code>add_slide(slide)</code>","text":"<p>A method for adding a slide for the story.</p> <p>Parameters:</p> Name Type Description Default <code>slide</code> <code>Slide</code> <p>The next slide of the story.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the type of the <code>slide</code> is not Slide.</p> Example <p>Add a slide to the story:</p> <pre><code>story.add_slide(\n    Slide(\n        Step(\n            Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n        )\n    )\n)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_slide(self, slide: Slide) -&gt; None:\n    \"\"\"\n    A method for adding a slide for the story.\n\n    Args:\n        slide: The next slide of the story.\n\n    Raises:\n        TypeError: If the type of the `slide` is not\n            [Slide][ipyvizzustory.storylib.story.Slide].\n\n    Example:\n        Add a slide to the story:\n\n            story.add_slide(\n                Slide(\n                    Step(\n                        Config({\"x\": \"Foo\", \"y\": \"Bar\"})\n                    )\n                )\n            )\n    \"\"\"\n\n    if not slide or type(slide) != Slide:  # pylint: disable=unidiomatic-typecheck\n        raise TypeError(\"Type must be Slide.\")\n    self[\"slides\"].append(slide)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.set_feature","title":"<code>set_feature(name, enabled)</code>","text":"<p>A method for enabling or disabling a feature of the story.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the feature.</p> required <code>enabled</code> <code>bool</code> <p><code>True</code> if enabled or <code>False</code> if disabled.</p> required Example <p>Set a feature of the story, for example enable the tooltip:</p> <pre><code>story.set_feature(\"tooltip\", True)</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def set_feature(self, name: str, enabled: bool) -&gt; None:\n    \"\"\"\n    A method for enabling or disabling a feature of the story.\n\n    Args:\n        name: The name of the feature.\n        enabled: `True` if enabled or `False` if disabled.\n\n    Example:\n        Set a feature of the story, for example enable the tooltip:\n\n            story.set_feature(\"tooltip\", True)\n    \"\"\"\n\n    self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\")</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.add_event","title":"<code>add_event(event, handler)</code>","text":"<p>A method for creating and turning on an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The type of the event.</p> required <code>handler</code> <code>str</code> <p>The handler <code>JavaScript</code> expression as string.</p> required Example <p>Add an event handler to the story:</p> <pre><code>story.add_event(\"click\", \"alert(JSON.stringify(event.detail));\")</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_event(self, event: str, handler: str) -&gt; None:\n    \"\"\"\n    A method for creating and turning on an event handler.\n\n    Args:\n        event: The type of the event.\n        handler: The handler `JavaScript` expression as string.\n\n    Example:\n        Add an event handler to the story:\n\n            story.add_event(\"click\", \"alert(JSON.stringify(event.detail));\")\n    \"\"\"\n\n    self._events.append(\n        f\"chart.on('{event}', event =&gt; {{{' '.join(handler.split())}}});\"\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.add_plugin","title":"<code>add_plugin(plugin, options=None, name='default')</code>","text":"<p>A method for register plugins of the chart.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>str</code> <p>The package name or the url of the plugin.</p> required <code>options</code> <code>Optional[dict]</code> <p>The plugin constructor options.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the plugin (default <code>default</code>).</p> <code>'default'</code> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def add_plugin(\n    self, plugin: str, options: Optional[dict] = None, name: str = \"default\"\n) -&gt; None:\n    \"\"\"\n    A method for register plugins of the chart.\n\n    Args:\n        plugin: The package name or the url of the plugin.\n        options: The plugin constructor options.\n        name: The name of the plugin (default `default`).\n    \"\"\"\n\n    if options is None:\n        options = {}\n\n    self._plugins.append(\n        \"plugins.push({\"\n        + f\"plugin: '{plugin}', \"\n        + f\"options: {json.dumps(options, cls=RawJavaScriptEncoder)}, \"\n        + f\"name: '{name}'\"\n        + \"})\"\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.set_size","title":"<code>set_size(width=None, height=None, aspect_ratio=None)</code>","text":"<p>A method for setting width/height settings.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>Optional[Union[int, float, str]]</code> <p>The width of the presentation story.</p> <code>None</code> <code>height</code> <code>Optional[Union[int, float, str]]</code> <p>The height of the presentation story.</p> <code>None</code> <code>aspect_ratio</code> <code>Optional[Union[int, float, str]]</code> <p>The aspect ratio of the presentation story.</p> <code>None</code> Example <p>Change the size of the story:</p> <pre><code>story.set_size(\"100%\", \"400px\")</code></pre> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def set_size(\n    self,\n    width: Optional[Union[int, float, str]] = None,\n    height: Optional[Union[int, float, str]] = None,\n    aspect_ratio: Optional[Union[int, float, str]] = None,\n) -&gt; None:\n    \"\"\"\n    A method for setting width/height settings.\n\n    Args:\n        width: The width of the presentation story.\n        height: The height of the presentation story.\n        aspect_ratio: The aspect ratio of the presentation story.\n\n    Example:\n        Change the size of the story:\n\n            story.set_size(\"100%\", \"400px\")\n    \"\"\"\n\n    self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio)</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.to_html","title":"<code>to_html()</code>","text":"<p>A method for assembling the <code>HTML</code> code.</p> <p>Returns:</p> Type Description <code>str</code> <p>The assembled <code>HTML</code> code as string.</p> Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def to_html(self) -&gt; str:\n    \"\"\"\n    A method for assembling the `HTML` code.\n\n    Returns:\n        The assembled `HTML` code as string.\n    \"\"\"\n\n    vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\"\n    return DISPLAY_TEMPLATE.format(\n        id=uuid.uuid4().hex[:7],\n        version=__version__,\n        analytics=str(self._analytics).lower(),\n        vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\",\n        vizzu_story=self._vizzu_story,\n        vizzu_player_data=vizzu_player_data,\n        start_slide=(\n            f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\"\n        ),\n        chart_size=self._size.style,\n        chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features),\n        chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events),\n        chart_plugins=f\"\\n{DISPLAY_INDENT * 3}\".join(self._plugins),\n    )</code></pre>"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.export_to_html","title":"<code>export_to_html(filename)</code>","text":"<p>A method for exporting the story into <code>HTML</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>PathLike</code> <p>The path of the target <code>HTML</code> file.</p> required Source code in <code>src/ipyvizzustory/storylib/story.py</code> <pre><code>def export_to_html(self, filename: PathLike) -&gt; None:\n    \"\"\"\n    A method for exporting the story into `HTML` file.\n\n    Args:\n        filename: The path of the target `HTML` file.\n    \"\"\"\n\n    with open(filename, \"w\", encoding=\"utf8\") as file_desc:\n        file_desc.write(self.to_html())</code></pre>"},{"location":"reference/ipyvizzustory/storylib/template/","title":"Template","text":""},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template","title":"<code>ipyvizzustory.storylib.template</code>","text":"<p>A module for storing the <code>HTML</code> templates.</p>"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template.VIZZU_STORY","title":"<code>ipyvizzustory.storylib.template.VIZZU_STORY = 'https://cdn.jsdelivr.net/npm/vizzu-story@0.8/dist/vizzu-story.min.js'</code>  <code>module-attribute</code>","text":"<p>A variable for storing the default url of the <code>vizzu-story</code> package.</p>"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template.DISPLAY_INDENT","title":"<code>ipyvizzustory.storylib.template.DISPLAY_INDENT = '    '</code>  <code>module-attribute</code>","text":"<p>A variable for storing the default indent in the <code>HTML</code> template.</p>"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template.DISPLAY_TEMPLATE","title":"<code>ipyvizzustory.storylib.template.DISPLAY_TEMPLATE = '\\n&lt;div&gt;\\n    &lt;vizzu-player id=\"{id}\" {vizzu} {start_slide} controller&gt;&lt;/vizzu-player&gt;\\n    &lt;script type=\"module\"&gt;\\n        import VizzuPlayer from \"{vizzu_story}\";\\n\\n        class IpyvizzuStory {{\\n            static version = \"{version}\";\\n            static analytics = undefined;\\n\\n            static changeAnalyticsTo(analytics) {{\\n                if (IpyvizzuStory.analytics !== analytics) {{\\n                    console.log(\"ipyvizzu-story gather usage stats:\", analytics);\\n                    IpyvizzuStory.analytics = analytics;\\n                }}\\n                if (analytics) {{\\n                    IpyvizzuStory._addHeadScript();\\n                }} else {{\\n                    IpyvizzuStory._removeScript(\"ipyvizzu-story-analytics-head\");\\n                }}\\n            }}\\n\\n            static _addHeadScript() {{\\n                const scriptId = \"ipyvizzu-story-analytics-head\";\\n                if (!IpyvizzuStory._isScriptAppended(scriptId)) {{\\n                    const script = document.createElement(\"script\");\\n                    script.defer = true;\\n                    script.src = \"https://plausible.io/js/script.local.js\";\\n                    script.dataset.domain = \"usage.ipyvizzu-story.com\";\\n                    script.id = scriptId;\\n                    document.getElementsByTagName(\"head\")[0].appendChild(script);\\n                }}\\n            }}\\n\\n            static _isScriptAppended(id) {{\\n                return document.querySelector(`script[id=\"${{id}}\"]`) !== null;\\n            }}\\n\\n            static _removeScript(id) {{\\n                const script = document.getElementById(id);\\n                if (script) script.remove();\\n            }}\\n        }}\\n\\n        if (IpyvizzuStory.version !== window.IpyvizzuStory?.version) {{\\n            window.IpyvizzuStory = IpyvizzuStory;\\n            console.log(`ipyvizzu-story ${{IpyvizzuStory.version}}`);\\n        }}\\n\\n        window.IpyvizzuStory?.changeAnalyticsTo({analytics});\\n\\n        class Plugins {{\\n            static _resolveVizzuVersion(vp) {{\\n                const url = vp.vizzuUrl;\\n                const versionMatch = url.match(/vizzu@([^\\\\/]+)\\\\//);\\n                return versionMatch[1];\\n            }}\\n\\n            static _resolveUrl(plugin, tag) {{\\n                if (!plugin.includes(\\'/\\')) {{\\n                    const jsdelivr = \"https://cdn.jsdelivr.net/npm/@vizzu\";\\n                    return `${{jsdelivr}}/${{plugin}}@${{tag}}/dist/mjs/index.min.js`;\\n                }}\\n                return plugin;\\n            }}\\n\\n            static register(vp, chart, plugins) {{\\n                const tag = `vizzu-${{Plugins._resolveVizzuVersion(vp)}}`;\\n                const pluginsRegistered = [];\\n                for (const plugin of plugins) {{\\n                    const pluginUrl = Plugins._resolveUrl(plugin.plugin, tag);\\n                    const pluginRegistered = import(pluginUrl).then(pluginModule =&gt; {{\\n                        const pluginInstance = new pluginModule[plugin.name](plugin.options);\\n                        chart.feature(pluginInstance, true);\\n                    }}).catch((error) =&gt; {{\\n                        console.error(\\'Error importing plugin:\\', pluginUrl, error)\\n                    }});\\n                    pluginsRegistered.push(pluginRegistered);\\n                }}\\n                return Promise.all(pluginsRegistered);\\n            }}\\n        }}\\n\\n        const vp = document.getElementById(\"{id}\");\\n        vp.initializing.then(chart =&gt; {{\\n            const lib = vp.Vizzu;\\n\\n            // story.set_size()\\n            {chart_size}\\n\\n            // story.add_plugin()\\n            const plugins = [];\\n            {chart_plugins}\\n            Plugins.register(vp, chart, plugins).then(() =&gt; {{\\n                // story.set_feature()\\n                {chart_features}\\n                // story.add_event()\\n                {chart_events}\\n\\n                const vizzuPlayerData = {vizzu_player_data};\\n                vp.slides = vizzuPlayerData;\\n            }});\\n        }});\\n    &lt;/script&gt;\\n&lt;/div&gt;\\n'</code>  <code>module-attribute</code>","text":"<p>A variable for storing the <code>vizzu-story</code> <code>HTML</code> template.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This is an excellent starting point to get acquainted with <code>ipyvizzu-story</code>, as it walks you through the installation and initialization of the extension, introduces the logic it employs and the different settings to control how your animated data stories look and behave.</p> <p>The tutorial is organized into chapters that introduce the concept and the details of <code>ipyvizzu-story</code> step-by-step. You can find the list of chapters at the end of this page and in the menu.</p> <p>Since <code>ipyvizzu-story</code> is built on top of ipyvizzu, it's recommended that you learn and understand <code>ipyvizzu</code> first. The tutorial for <code>ipyvizzu</code> can be found here.</p>"},{"location":"tutorial/#basic-logic-of-ipyvizzu-story","title":"Basic logic of ipyvizzu-story","text":"<p>With <code>ipyvizzu-story</code>, you can build, show and export a <code>Story</code> object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into <code>Slides</code> and <code>Steps</code>. When played,<code>ipyvizzu-story</code> automatically adds a set of buttons underneath the chart, via which the users can navigate between the <code>Slides</code> within the story.</p> <p><code>Slides</code> can contain one or more <code>Steps</code>.</p> <p>A <code>Step</code> (and a single-Step <code>Slide</code>) is basically the same as the <code>Chart</code> object in <code>ipyvizzu</code>, with a minor, but important difference:</p> <ul> <li>all of the data has to be added to the story at initialization, and it can be     filtered at every <code>Step</code> throughout the <code>Story</code>.</li> </ul> <p>In case of a <code>Slide</code> with multiple <code>Steps</code>, all, but the last <code>Steps</code> are interim charts that connect a <code>Slide</code> with a previous <code>Slide</code> but the animation will not stop at these <code>Steps</code> when the <code>Story</code> is being played.</p>"},{"location":"tutorial/#installation","title":"Installation","text":"<pre><code>pip install ipyvizzu-story</code></pre> <p>Visit Installation chapter for more options and details.</p>"},{"location":"tutorial/#usage","title":"Usage","text":"<p>Note</p> <p><code>ipyvizzu-story</code> generates <code>JavaScript</code> code, then the <code>vizzu-story</code> and <code>vizzu</code> calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. <code>vizzu-story</code> and <code>vizzu</code> reports its errors there. If you get a <code>vizzu-story</code> or <code>vizzu</code> error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser.</p> <ul> <li>Data</li> <li>Initialization</li> <li>Building blocks</li> <li>Export</li> </ul>"},{"location":"tutorial/building_blocks/","title":"Building blocks","text":"<p>In<code>ipyvizzu-story</code>, you can build, show and export a <code>Story</code> object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into <code>Slides</code> and <code>Steps</code>.</p>"},{"location":"tutorial/building_blocks/#slides-and-steps","title":"Slides and Steps","text":"<p><code>Slides</code> can contain one or more <code>Steps</code>.</p> <p>A <code>Step</code> (and a single-Step <code>Slide</code>) is basically the same as the <code>Chart</code> object in ipyvizzu, with a minor, but important difference:</p> <ul> <li>all of the data has to be added to the story at initialization, and it can be     filtered at every <code>Step</code> throughout the <code>Story</code>.</li> </ul> <pre><code>slide = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide)</code></pre> <p>In case of a <code>Slide</code> with a sequence of <code>Steps</code>, all, but the last <code>Steps</code> are interim charts that connect a <code>Slide</code> with a previous <code>Slide</code>. The animation will be automatically played until the last <code>Step</code> in the sequence, allowing for more complex transitions between <code>Slides</code>.</p> <pre><code>slide = Slide()\nslide.add_step(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nslide.add_step(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\", \"geometry\": \"rectangle\"}),\n    )\n)\nstory.add_slide(slide)</code></pre> <p>Viewers can navigate between <code>Slides</code> with the navigation controls that appear beneath the chart. They can also use the <code>PgUp</code> and <code>PgDn</code> buttons, and the left and right arrows to navigate between <code>Slides</code>, and the <code>Home</code> and <code>End</code> buttons to jump to the first and last <code>Slide</code> in the <code>Story</code>.</p> <p>On each chart, you can define the chart configuration, style and animation options using the same objects as in <code>ipyvizzu</code>. However, you can not modify the underlying data between the slides, just the data filter can be used.</p> <pre><code>slide = Slide(\n    Step(\n        Data.filter(\"record['Foo'] == 'Bob'\"),\n        Config({\"geometry\": \"circle\"}),\n        Style({\"plot\": {\"marker\": {\"colorPalette\": \"#FF0000\"}}}),\n        duration=1,\n    )\n)\nstory.add_slide(slide)</code></pre> <p>Tip</p> <p>Check ipyvizzu - Filtering &amp; adding new records chapter and ipyvizzu - Style chapter for more details on data filtering and style options.</p> <p>There are some parameters of the <code>Story</code> you can change before you play it.</p>"},{"location":"tutorial/building_blocks/#story-features","title":"Story features","text":"<p>You can enable or disable chart features, such as the <code>Tooltip</code> that appears if the viewer hovers their mouse over a specific element of the chart.</p> <pre><code>story.set_feature(\"tooltip\", True)</code></pre> <p>Tip</p> <p>See ipyvizzu - Axes, title, tooltip chapter for more details on chart features.</p>"},{"location":"tutorial/building_blocks/#story-events","title":"Story events","text":"<p>You have many more options to change the look and feel of the <code>Story</code> by using events.</p> <pre><code>handler = \"alert(JSON.stringify(event.detail))\"\n\nstory.add_event(\"click\", handler)</code></pre> <p>Tip</p> <p>See ipyvizzu - Events chapter for more details on events.</p>"},{"location":"tutorial/building_blocks/#play","title":"Play","text":"<p>After you created the <code>Story</code>, you can play it with the <code>play</code>, or the <code>_repr_html_</code> method, depending on the environment you run <code>ipyvizzu-story</code> in.</p> <pre><code>story.play()</code></pre> <p>or</p> <pre><code>story</code></pre> <p>Info</p> <p>If you run into issues with playing your story, check the Environments chapter for more details on the available features in your environment.</p>"},{"location":"tutorial/data/","title":"Data","text":"<p>You can use the same data definition formats as in the <code>ipyvizzu</code> library: <code>pandas DataFrame</code>, <code>JSON</code>, or add data manually in different formats. Similarly to <code>ipyvizzu</code>, there are two types of data series: dimensions and measures.</p> <p>Note</p> <p>Please note, that all of the data used throughout your data story has to be added to the story at initialization. The data being shown can be filtered at each step.</p> <p>Tip</p> <p>See ipyvizzu - Data chapter for more details about data.</p> <p>Here's some sample code for common use cases.</p>"},{"location":"tutorial/data/#using-pandas-dataframe","title":"Using pandas DataFrame","text":"<pre><code>from ipyvizzu import Data\nimport pandas as pd\n\n\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.12/assets/data/data.csv\"\n)\ndata.add_df(df)</code></pre>"},{"location":"tutorial/data/#specify-data-by-series","title":"Specify data by series","text":"<pre><code>from ipyvizzu import Data\n\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])</code></pre>"},{"location":"tutorial/export/","title":"Export","text":"<p>You can export your <code>Story</code> into an <code>HTML</code> file, by calling the <code>export_to_html</code> method. The data, the <code>Story</code> and the navigation buttons will all be included in the generated <code>HTML</code> file.</p> <pre><code>story.export_to_html(filename=\"mystory.html\")</code></pre> <p>You can also get the raw <code>HTML</code> string using the following code.</p> <pre><code>html = story.to_html()\nprint(html)</code></pre>"},{"location":"tutorial/initialization/","title":"Initialization","text":""},{"location":"tutorial/initialization/#import","title":"Import","text":"<p>From <code>ipyvizzu</code> import <code>Data</code>, <code>Config</code> and <code>Style</code> and from <code>ipyvizzu-story</code> import <code>Story</code>, <code>Slide</code> and <code>Step</code>:</p> <pre><code>from ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step</code></pre>"},{"location":"tutorial/initialization/#constructor","title":"Constructor","text":"<p>You need to put the <code>Data</code> object (described in the Data chapter) into the <code>Story</code> constructor. You can not alter the data later but the data being shown can be filtered at each step.</p> <pre><code>story = Story(data=data)</code></pre> <p>You can set the style used initally for the story as you can see in this example, and you can alter the style at each step within the story.</p> <pre><code>story = Story(data=data, style=Style({\"title\": {\"fontSize\": 50}}))</code></pre> <p>Tip</p> <p>Check ipyvizzu - Color palette &amp; fonts chapter and ipyvizzu - Chart layout chapter for more details on the available styling options.</p>"},{"location":"tutorial/initialization/#size","title":"Size","text":"<p><code>ipyvizzu-story</code> tries to apply the ideal <code>width</code> and <code>height</code> for the story, but you can also set them manually with the <code>set_size</code> method.</p> <pre><code>story.set_size(width=\"100%\", height=\"400px\")</code></pre> <p>You can also set the aspect ratio of the story. This will not affect the aspect ratio in full-screen view as that will be determined by the actual screen's dimensions.</p> <pre><code>story.set_size(aspect_ratio=16 / 9)</code></pre> <p>If you use the <code>aspect_ratio</code>, the <code>width</code> or <code>height</code> parameters can also be set, but in some environments, if you want to use the <code>play</code> method, it will only accept pixels.</p> <pre><code>story.set_size(width=\"800px\", aspect_ratio=16 / 9)</code></pre>"},{"location":"tutorial/initialization/#story-properties","title":"Story properties","text":""},{"location":"tutorial/initialization/#analytics","title":"Analytics","text":"<p>The usage statistics feature in <code>ipyvizzu-story</code> allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users.</p> <p>We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only.</p> <p>Usage statistics feature is optional, and by default, it is enabled (default value: <code>True</code>). Users can choose to opt-out if they prefer not to participate in data collection. Please note that even when this feature is enabled, publishing anything made with <code>ipyvizzu-story</code> remains GDPR compatible.</p> <p>To disable usage statistics feature, set <code>analytics</code> property to <code>False</code>.</p> <pre><code>story.analytics = False</code></pre>"},{"location":"tutorial/initialization/#vizzu","title":"Vizzu","text":"<p><code>ipyvizzu-story</code> requires and downloads the Vizzu <code>JavaScript</code>/<code>C++</code> library from <code>jsDelivr CDN</code>, but you can also use a different or self-hosted version of it.</p> <pre><code>story.vizzu = \"&lt;url&gt;/vizzu.min.js\"</code></pre> <p>Info</p> <p>The default value of <code>vizzu</code> property is <code>None</code>, because the default version of <code>Vizzu</code> is stored in the <code>vizzu-story</code> package.</p>"},{"location":"tutorial/initialization/#vizzu-story","title":"Vizzu-Story","text":"<p><code>ipyvizzu-story</code> requires and downloads the Vizzu-Story <code>JavaScript</code> package from <code>jsDelivr CDN</code>, but you can also use a different or self-hosted version of it.</p> <pre><code>story.vizzu_story = \"&lt;url&gt;/vizzu-story.min.js\"</code></pre>"},{"location":"tutorial/initialization/#start-slide","title":"Start slide","text":"<p>You can start the story on a specific slide via the <code>start_slide</code> property. You can also use negative numbers, where <code>-1</code> means the last slide.</p> <pre><code>story.start_slide = 3</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}